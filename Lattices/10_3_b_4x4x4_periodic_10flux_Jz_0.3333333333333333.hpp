#include <armadillo>
#include <complex>

using namespace arma;

sp_cx_mat def_matrix()
{
   sp_cx_mat A(256,256);
   A(0, 1) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(1, 0) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(0, 3) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(3, 0) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(0, 67) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(67, 0) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(1, 2) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(2, 1) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(1, 50) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(50, 1) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(2, 7) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(7, 2) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(2, 17) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(17, 2) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(3, 14) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(14, 3) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(3, 192) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(192, 3) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(4, 5) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(5, 4) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(4, 7) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(7, 4) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(4, 71) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(71, 4) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(5, 6) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(6, 5) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(5, 54) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(54, 5) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(6, 11) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(11, 6) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(6, 21) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(21, 6) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(7, 196) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(196, 7) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(8, 9) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(9, 8) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(8, 11) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(11, 8) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(8, 75) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(75, 8) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(9, 10) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(10, 9) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(9, 58) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(58, 9) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(10, 15) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(15, 10) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(10, 25) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(25, 10) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(11, 200) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(200, 11) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(12, 13) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(13, 12) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(12, 15) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(15, 12) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(12, 79) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(79, 12) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(13, 14) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(14, 13) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(13, 62) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(62, 13) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(14, 29) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(29, 14) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(15, 204) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(204, 15) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(16, 17) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(17, 16) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(16, 19) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(19, 16) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(16, 83) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(83, 16) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(17, 18) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(18, 17) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(18, 23) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(23, 18) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(18, 33) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(33, 18) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(19, 30) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(30, 19) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(19, 208) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(208, 19) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(20, 21) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(21, 20) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(20, 23) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(23, 20) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(20, 87) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(87, 20) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(21, 22) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(22, 21) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(22, 27) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(27, 22) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(22, 37) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(37, 22) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(23, 212) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(212, 23) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(24, 25) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(25, 24) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(24, 27) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(27, 24) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(24, 91) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(91, 24) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(25, 26) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(26, 25) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(26, 31) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(31, 26) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(26, 41) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(41, 26) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(27, 216) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(216, 27) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(28, 29) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(29, 28) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(28, 31) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(31, 28) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(28, 95) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(95, 28) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(29, 30) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(30, 29) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(30, 45) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(45, 30) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(31, 220) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(220, 31) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(32, 33) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(33, 32) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(32, 35) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(35, 32) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(32, 99) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(99, 32) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(33, 34) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(34, 33) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(34, 39) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(39, 34) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(34, 49) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(49, 34) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(35, 46) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(46, 35) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(35, 224) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(224, 35) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(36, 37) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(37, 36) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(36, 39) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(39, 36) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(36, 103) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(103, 36) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(37, 38) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(38, 37) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(38, 43) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(43, 38) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(38, 53) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(53, 38) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(39, 228) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(228, 39) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(40, 41) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(41, 40) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(40, 43) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(43, 40) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(40, 107) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(107, 40) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(41, 42) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(42, 41) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(42, 47) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(47, 42) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(42, 57) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(57, 42) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(43, 232) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(232, 43) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(44, 45) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(45, 44) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(44, 47) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(47, 44) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(44, 111) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(111, 44) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(45, 46) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(46, 45) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(46, 61) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(61, 46) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(47, 236) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(236, 47) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(48, 49) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(49, 48) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(48, 51) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(51, 48) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(48, 115) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(115, 48) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(49, 50) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(50, 49) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(50, 55) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(55, 50) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(51, 62) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(62, 51) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(51, 240) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(240, 51) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(52, 53) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(53, 52) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(52, 55) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(55, 52) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(52, 119) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(119, 52) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(53, 54) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(54, 53) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(54, 59) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(59, 54) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(55, 244) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(244, 55) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(56, 57) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(57, 56) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(56, 59) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(59, 56) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(56, 123) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(123, 56) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(57, 58) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(58, 57) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(58, 63) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(63, 58) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(59, 248) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(248, 59) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(60, 61) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(61, 60) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(60, 63) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(63, 60) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(60, 127) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(127, 60) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(61, 62) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(62, 61) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(63, 252) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(252, 63) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(64, 65) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(65, 64) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(64, 67) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(67, 64) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(64, 131) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(131, 64) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(65, 66) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(66, 65) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(65, 114) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(114, 65) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(66, 71) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(71, 66) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(66, 81) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(81, 66) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(67, 78) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(78, 67) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(68, 69) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(69, 68) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(68, 71) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(71, 68) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(68, 135) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(135, 68) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(69, 70) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(70, 69) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(69, 118) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(118, 69) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(70, 75) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(75, 70) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(70, 85) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(85, 70) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(72, 73) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(73, 72) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(72, 75) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(75, 72) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(72, 139) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(139, 72) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(73, 74) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(74, 73) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(73, 122) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(122, 73) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(74, 79) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(79, 74) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(74, 89) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(89, 74) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(76, 77) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(77, 76) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(76, 79) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(79, 76) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(76, 143) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(143, 76) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(77, 78) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(78, 77) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(77, 126) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(126, 77) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(78, 93) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(93, 78) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(80, 81) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(81, 80) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(80, 83) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(83, 80) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(80, 147) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(147, 80) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(81, 82) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(82, 81) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(82, 87) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(87, 82) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(82, 97) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(97, 82) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(83, 94) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(94, 83) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(84, 85) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(85, 84) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(84, 87) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(87, 84) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(84, 151) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(151, 84) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(85, 86) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(86, 85) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(86, 91) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(91, 86) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(86, 101) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(101, 86) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(88, 89) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(89, 88) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(88, 91) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(91, 88) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(88, 155) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(155, 88) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(89, 90) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(90, 89) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(90, 95) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(95, 90) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(90, 105) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(105, 90) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(92, 93) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(93, 92) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(92, 95) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(95, 92) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(92, 159) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(159, 92) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(93, 94) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(94, 93) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(94, 109) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(109, 94) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(96, 97) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(97, 96) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(96, 99) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(99, 96) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(96, 163) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(163, 96) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(97, 98) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(98, 97) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(98, 103) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(103, 98) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(98, 113) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(113, 98) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(99, 110) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(110, 99) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(100, 101) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(101, 100) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(100, 103) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(103, 100) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(100, 167) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(167, 100) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(101, 102) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(102, 101) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(102, 107) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(107, 102) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(102, 117) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(117, 102) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(104, 105) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(105, 104) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(104, 107) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(107, 104) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(104, 171) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(171, 104) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(105, 106) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(106, 105) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(106, 111) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(111, 106) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(106, 121) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(121, 106) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(108, 109) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(109, 108) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(108, 111) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(111, 108) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(108, 175) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(175, 108) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(109, 110) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(110, 109) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(110, 125) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(125, 110) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(112, 113) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(113, 112) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(112, 115) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(115, 112) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(112, 179) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(179, 112) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(113, 114) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(114, 113) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(114, 119) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(119, 114) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(115, 126) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(126, 115) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(116, 117) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(117, 116) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(116, 119) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(119, 116) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(116, 183) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(183, 116) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(117, 118) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(118, 117) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(118, 123) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(123, 118) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(120, 121) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(121, 120) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(120, 123) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(123, 120) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(120, 187) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(187, 120) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(121, 122) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(122, 121) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(122, 127) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(127, 122) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(124, 125) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(125, 124) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(124, 127) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(127, 124) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(124, 191) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(191, 124) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(125, 126) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(126, 125) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(128, 129) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(129, 128) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(128, 131) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(131, 128) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(128, 195) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(195, 128) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(129, 130) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(130, 129) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(129, 178) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(178, 129) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(130, 135) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(135, 130) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(130, 145) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(145, 130) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(131, 142) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(142, 131) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(132, 133) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(133, 132) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(132, 135) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(135, 132) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(132, 199) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(199, 132) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(133, 134) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(134, 133) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(133, 182) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(182, 133) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(134, 139) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(139, 134) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(134, 149) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(149, 134) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(136, 137) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(137, 136) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(136, 139) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(139, 136) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(136, 203) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(203, 136) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(137, 138) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(138, 137) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(137, 186) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(186, 137) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(138, 143) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(143, 138) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(138, 153) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(153, 138) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(140, 141) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(141, 140) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(140, 143) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(143, 140) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(140, 207) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(207, 140) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(141, 142) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(142, 141) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(141, 190) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(190, 141) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(142, 157) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(157, 142) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(144, 145) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(145, 144) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(144, 147) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(147, 144) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(144, 211) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(211, 144) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(145, 146) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(146, 145) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(146, 151) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(151, 146) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(146, 161) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(161, 146) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(147, 158) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(158, 147) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(148, 149) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(149, 148) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(148, 151) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(151, 148) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(148, 215) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(215, 148) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(149, 150) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(150, 149) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(150, 155) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(155, 150) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(150, 165) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(165, 150) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(152, 153) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(153, 152) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(152, 155) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(155, 152) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(152, 219) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(219, 152) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(153, 154) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(154, 153) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(154, 159) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(159, 154) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(154, 169) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(169, 154) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(156, 157) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(157, 156) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(156, 159) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(159, 156) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(156, 223) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(223, 156) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(157, 158) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(158, 157) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(158, 173) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(173, 158) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(160, 161) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(161, 160) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(160, 163) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(163, 160) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(160, 227) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(227, 160) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(161, 162) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(162, 161) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(162, 167) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(167, 162) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(162, 177) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(177, 162) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(163, 174) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(174, 163) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(164, 165) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(165, 164) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(164, 167) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(167, 164) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(164, 231) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(231, 164) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(165, 166) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(166, 165) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(166, 171) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(171, 166) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(166, 181) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(181, 166) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(168, 169) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(169, 168) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(168, 171) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(171, 168) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(168, 235) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(235, 168) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(169, 170) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(170, 169) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(170, 175) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(175, 170) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(170, 185) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(185, 170) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(172, 173) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(173, 172) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(172, 175) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(175, 172) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(172, 239) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(239, 172) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(173, 174) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(174, 173) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(174, 189) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(189, 174) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(176, 177) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(177, 176) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(176, 179) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(179, 176) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(176, 243) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(243, 176) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(177, 178) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(178, 177) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(178, 183) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(183, 178) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(179, 190) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(190, 179) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(180, 181) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(181, 180) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(180, 183) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(183, 180) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(180, 247) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(247, 180) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(181, 182) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(182, 181) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(182, 187) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(187, 182) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(184, 185) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(185, 184) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(184, 187) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(187, 184) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(184, 251) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(251, 184) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(185, 186) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(186, 185) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(186, 191) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(191, 186) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(188, 189) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(189, 188) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(188, 191) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(191, 188) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(188, 255) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(255, 188) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(189, 190) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(190, 189) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(192, 193) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(193, 192) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(192, 195) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(195, 192) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(193, 194) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(194, 193) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(193, 242) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(242, 193) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(194, 199) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(199, 194) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(194, 209) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(209, 194) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(195, 206) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(206, 195) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(196, 197) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(197, 196) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(196, 199) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(199, 196) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(197, 198) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(198, 197) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(197, 246) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(246, 197) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(198, 203) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(203, 198) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(198, 213) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(213, 198) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(200, 201) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(201, 200) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(200, 203) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(203, 200) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(201, 202) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(202, 201) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(201, 250) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(250, 201) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(202, 207) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(207, 202) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(202, 217) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(217, 202) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(204, 205) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(205, 204) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(204, 207) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(207, 204) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(205, 206) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(206, 205) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(205, 254) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(254, 205) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(206, 221) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(221, 206) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(208, 209) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(209, 208) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(208, 211) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(211, 208) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(209, 210) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(210, 209) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(210, 215) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(215, 210) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(210, 225) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(225, 210) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(211, 222) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(222, 211) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(212, 213) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(213, 212) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(212, 215) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(215, 212) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(213, 214) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(214, 213) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(214, 219) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(219, 214) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(214, 229) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(229, 214) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(216, 217) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(217, 216) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(216, 219) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(219, 216) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(217, 218) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(218, 217) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(218, 223) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(223, 218) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(218, 233) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(233, 218) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(220, 221) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(221, 220) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(220, 223) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(223, 220) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(221, 222) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(222, 221) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(222, 237) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(237, 222) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(224, 225) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(225, 224) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(224, 227) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(227, 224) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(225, 226) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(226, 225) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(226, 231) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(231, 226) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(226, 241) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(241, 226) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(227, 238) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(238, 227) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(228, 229) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(229, 228) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(228, 231) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(231, 228) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(229, 230) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(230, 229) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(230, 235) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(235, 230) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(230, 245) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(245, 230) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(232, 233) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(233, 232) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(232, 235) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(235, 232) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(233, 234) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(234, 233) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(234, 239) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(239, 234) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(234, 249) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(249, 234) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(236, 237) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(237, 236) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(236, 239) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(239, 236) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(237, 238) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(238, 237) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(238, 253) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(253, 238) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(240, 241) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(241, 240) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(240, 243) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(243, 240) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(241, 242) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(242, 241) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(242, 247) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(247, 242) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(243, 254) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(254, 243) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(244, 245) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(245, 244) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(244, 247) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(247, 244) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(245, 246) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(246, 245) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(246, 251) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(251, 246) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(248, 249) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(249, 248) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(248, 251) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(251, 248) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(249, 250) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(250, 249) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(250, 255) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(255, 250) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(252, 253) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(253, 252) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(252, 255) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(255, 252) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(253, 254) = std::complex<double>(0.0, 2.0*-0.3333333333333333);
   A(254, 253) = -std::complex<double>(0.0, 2.0*-0.3333333333333333);
   return A;
}

std::vector<int> non_zeros()
{
    std::vector<int> nz;
    int coo;
    coo = 256*0 + 1;
    nz.push_back(coo);
    coo = 256*0 + 3;
    nz.push_back(coo);
    coo = 256*0 + 67;
    nz.push_back(coo);
    coo = 256*1 + 2;
    nz.push_back(coo);
    coo = 256*1 + 50;
    nz.push_back(coo);
    coo = 256*2 + 7;
    nz.push_back(coo);
    coo = 256*2 + 17;
    nz.push_back(coo);
    coo = 256*3 + 14;
    nz.push_back(coo);
    coo = 256*3 + 192;
    nz.push_back(coo);
    coo = 256*4 + 5;
    nz.push_back(coo);
    coo = 256*4 + 7;
    nz.push_back(coo);
    coo = 256*4 + 71;
    nz.push_back(coo);
    coo = 256*5 + 6;
    nz.push_back(coo);
    coo = 256*5 + 54;
    nz.push_back(coo);
    coo = 256*6 + 11;
    nz.push_back(coo);
    coo = 256*6 + 21;
    nz.push_back(coo);
    coo = 256*7 + 196;
    nz.push_back(coo);
    coo = 256*8 + 9;
    nz.push_back(coo);
    coo = 256*8 + 11;
    nz.push_back(coo);
    coo = 256*8 + 75;
    nz.push_back(coo);
    coo = 256*9 + 10;
    nz.push_back(coo);
    coo = 256*9 + 58;
    nz.push_back(coo);
    coo = 256*10 + 15;
    nz.push_back(coo);
    coo = 256*10 + 25;
    nz.push_back(coo);
    coo = 256*11 + 200;
    nz.push_back(coo);
    coo = 256*12 + 13;
    nz.push_back(coo);
    coo = 256*12 + 15;
    nz.push_back(coo);
    coo = 256*12 + 79;
    nz.push_back(coo);
    coo = 256*13 + 14;
    nz.push_back(coo);
    coo = 256*13 + 62;
    nz.push_back(coo);
    coo = 256*14 + 29;
    nz.push_back(coo);
    coo = 256*15 + 204;
    nz.push_back(coo);
    coo = 256*16 + 17;
    nz.push_back(coo);
    coo = 256*16 + 19;
    nz.push_back(coo);
    coo = 256*16 + 83;
    nz.push_back(coo);
    coo = 256*17 + 18;
    nz.push_back(coo);
    coo = 256*18 + 23;
    nz.push_back(coo);
    coo = 256*18 + 33;
    nz.push_back(coo);
    coo = 256*19 + 30;
    nz.push_back(coo);
    coo = 256*19 + 208;
    nz.push_back(coo);
    coo = 256*20 + 21;
    nz.push_back(coo);
    coo = 256*20 + 23;
    nz.push_back(coo);
    coo = 256*20 + 87;
    nz.push_back(coo);
    coo = 256*21 + 22;
    nz.push_back(coo);
    coo = 256*22 + 27;
    nz.push_back(coo);
    coo = 256*22 + 37;
    nz.push_back(coo);
    coo = 256*23 + 212;
    nz.push_back(coo);
    coo = 256*24 + 25;
    nz.push_back(coo);
    coo = 256*24 + 27;
    nz.push_back(coo);
    coo = 256*24 + 91;
    nz.push_back(coo);
    coo = 256*25 + 26;
    nz.push_back(coo);
    coo = 256*26 + 31;
    nz.push_back(coo);
    coo = 256*26 + 41;
    nz.push_back(coo);
    coo = 256*27 + 216;
    nz.push_back(coo);
    coo = 256*28 + 29;
    nz.push_back(coo);
    coo = 256*28 + 31;
    nz.push_back(coo);
    coo = 256*28 + 95;
    nz.push_back(coo);
    coo = 256*29 + 30;
    nz.push_back(coo);
    coo = 256*30 + 45;
    nz.push_back(coo);
    coo = 256*31 + 220;
    nz.push_back(coo);
    coo = 256*32 + 33;
    nz.push_back(coo);
    coo = 256*32 + 35;
    nz.push_back(coo);
    coo = 256*32 + 99;
    nz.push_back(coo);
    coo = 256*33 + 34;
    nz.push_back(coo);
    coo = 256*34 + 39;
    nz.push_back(coo);
    coo = 256*34 + 49;
    nz.push_back(coo);
    coo = 256*35 + 46;
    nz.push_back(coo);
    coo = 256*35 + 224;
    nz.push_back(coo);
    coo = 256*36 + 37;
    nz.push_back(coo);
    coo = 256*36 + 39;
    nz.push_back(coo);
    coo = 256*36 + 103;
    nz.push_back(coo);
    coo = 256*37 + 38;
    nz.push_back(coo);
    coo = 256*38 + 43;
    nz.push_back(coo);
    coo = 256*38 + 53;
    nz.push_back(coo);
    coo = 256*39 + 228;
    nz.push_back(coo);
    coo = 256*40 + 41;
    nz.push_back(coo);
    coo = 256*40 + 43;
    nz.push_back(coo);
    coo = 256*40 + 107;
    nz.push_back(coo);
    coo = 256*41 + 42;
    nz.push_back(coo);
    coo = 256*42 + 47;
    nz.push_back(coo);
    coo = 256*42 + 57;
    nz.push_back(coo);
    coo = 256*43 + 232;
    nz.push_back(coo);
    coo = 256*44 + 45;
    nz.push_back(coo);
    coo = 256*44 + 47;
    nz.push_back(coo);
    coo = 256*44 + 111;
    nz.push_back(coo);
    coo = 256*45 + 46;
    nz.push_back(coo);
    coo = 256*46 + 61;
    nz.push_back(coo);
    coo = 256*47 + 236;
    nz.push_back(coo);
    coo = 256*48 + 49;
    nz.push_back(coo);
    coo = 256*48 + 51;
    nz.push_back(coo);
    coo = 256*48 + 115;
    nz.push_back(coo);
    coo = 256*49 + 50;
    nz.push_back(coo);
    coo = 256*50 + 55;
    nz.push_back(coo);
    coo = 256*51 + 62;
    nz.push_back(coo);
    coo = 256*51 + 240;
    nz.push_back(coo);
    coo = 256*52 + 53;
    nz.push_back(coo);
    coo = 256*52 + 55;
    nz.push_back(coo);
    coo = 256*52 + 119;
    nz.push_back(coo);
    coo = 256*53 + 54;
    nz.push_back(coo);
    coo = 256*54 + 59;
    nz.push_back(coo);
    coo = 256*55 + 244;
    nz.push_back(coo);
    coo = 256*56 + 57;
    nz.push_back(coo);
    coo = 256*56 + 59;
    nz.push_back(coo);
    coo = 256*56 + 123;
    nz.push_back(coo);
    coo = 256*57 + 58;
    nz.push_back(coo);
    coo = 256*58 + 63;
    nz.push_back(coo);
    coo = 256*59 + 248;
    nz.push_back(coo);
    coo = 256*60 + 61;
    nz.push_back(coo);
    coo = 256*60 + 63;
    nz.push_back(coo);
    coo = 256*60 + 127;
    nz.push_back(coo);
    coo = 256*61 + 62;
    nz.push_back(coo);
    coo = 256*63 + 252;
    nz.push_back(coo);
    coo = 256*64 + 65;
    nz.push_back(coo);
    coo = 256*64 + 67;
    nz.push_back(coo);
    coo = 256*64 + 131;
    nz.push_back(coo);
    coo = 256*65 + 66;
    nz.push_back(coo);
    coo = 256*65 + 114;
    nz.push_back(coo);
    coo = 256*66 + 71;
    nz.push_back(coo);
    coo = 256*66 + 81;
    nz.push_back(coo);
    coo = 256*67 + 78;
    nz.push_back(coo);
    coo = 256*68 + 69;
    nz.push_back(coo);
    coo = 256*68 + 71;
    nz.push_back(coo);
    coo = 256*68 + 135;
    nz.push_back(coo);
    coo = 256*69 + 70;
    nz.push_back(coo);
    coo = 256*69 + 118;
    nz.push_back(coo);
    coo = 256*70 + 75;
    nz.push_back(coo);
    coo = 256*70 + 85;
    nz.push_back(coo);
    coo = 256*72 + 73;
    nz.push_back(coo);
    coo = 256*72 + 75;
    nz.push_back(coo);
    coo = 256*72 + 139;
    nz.push_back(coo);
    coo = 256*73 + 74;
    nz.push_back(coo);
    coo = 256*73 + 122;
    nz.push_back(coo);
    coo = 256*74 + 79;
    nz.push_back(coo);
    coo = 256*74 + 89;
    nz.push_back(coo);
    coo = 256*76 + 77;
    nz.push_back(coo);
    coo = 256*76 + 79;
    nz.push_back(coo);
    coo = 256*76 + 143;
    nz.push_back(coo);
    coo = 256*77 + 78;
    nz.push_back(coo);
    coo = 256*77 + 126;
    nz.push_back(coo);
    coo = 256*78 + 93;
    nz.push_back(coo);
    coo = 256*80 + 81;
    nz.push_back(coo);
    coo = 256*80 + 83;
    nz.push_back(coo);
    coo = 256*80 + 147;
    nz.push_back(coo);
    coo = 256*81 + 82;
    nz.push_back(coo);
    coo = 256*82 + 87;
    nz.push_back(coo);
    coo = 256*82 + 97;
    nz.push_back(coo);
    coo = 256*83 + 94;
    nz.push_back(coo);
    coo = 256*84 + 85;
    nz.push_back(coo);
    coo = 256*84 + 87;
    nz.push_back(coo);
    coo = 256*84 + 151;
    nz.push_back(coo);
    coo = 256*85 + 86;
    nz.push_back(coo);
    coo = 256*86 + 91;
    nz.push_back(coo);
    coo = 256*86 + 101;
    nz.push_back(coo);
    coo = 256*88 + 89;
    nz.push_back(coo);
    coo = 256*88 + 91;
    nz.push_back(coo);
    coo = 256*88 + 155;
    nz.push_back(coo);
    coo = 256*89 + 90;
    nz.push_back(coo);
    coo = 256*90 + 95;
    nz.push_back(coo);
    coo = 256*90 + 105;
    nz.push_back(coo);
    coo = 256*92 + 93;
    nz.push_back(coo);
    coo = 256*92 + 95;
    nz.push_back(coo);
    coo = 256*92 + 159;
    nz.push_back(coo);
    coo = 256*93 + 94;
    nz.push_back(coo);
    coo = 256*94 + 109;
    nz.push_back(coo);
    coo = 256*96 + 97;
    nz.push_back(coo);
    coo = 256*96 + 99;
    nz.push_back(coo);
    coo = 256*96 + 163;
    nz.push_back(coo);
    coo = 256*97 + 98;
    nz.push_back(coo);
    coo = 256*98 + 103;
    nz.push_back(coo);
    coo = 256*98 + 113;
    nz.push_back(coo);
    coo = 256*99 + 110;
    nz.push_back(coo);
    coo = 256*100 + 101;
    nz.push_back(coo);
    coo = 256*100 + 103;
    nz.push_back(coo);
    coo = 256*100 + 167;
    nz.push_back(coo);
    coo = 256*101 + 102;
    nz.push_back(coo);
    coo = 256*102 + 107;
    nz.push_back(coo);
    coo = 256*102 + 117;
    nz.push_back(coo);
    coo = 256*104 + 105;
    nz.push_back(coo);
    coo = 256*104 + 107;
    nz.push_back(coo);
    coo = 256*104 + 171;
    nz.push_back(coo);
    coo = 256*105 + 106;
    nz.push_back(coo);
    coo = 256*106 + 111;
    nz.push_back(coo);
    coo = 256*106 + 121;
    nz.push_back(coo);
    coo = 256*108 + 109;
    nz.push_back(coo);
    coo = 256*108 + 111;
    nz.push_back(coo);
    coo = 256*108 + 175;
    nz.push_back(coo);
    coo = 256*109 + 110;
    nz.push_back(coo);
    coo = 256*110 + 125;
    nz.push_back(coo);
    coo = 256*112 + 113;
    nz.push_back(coo);
    coo = 256*112 + 115;
    nz.push_back(coo);
    coo = 256*112 + 179;
    nz.push_back(coo);
    coo = 256*113 + 114;
    nz.push_back(coo);
    coo = 256*114 + 119;
    nz.push_back(coo);
    coo = 256*115 + 126;
    nz.push_back(coo);
    coo = 256*116 + 117;
    nz.push_back(coo);
    coo = 256*116 + 119;
    nz.push_back(coo);
    coo = 256*116 + 183;
    nz.push_back(coo);
    coo = 256*117 + 118;
    nz.push_back(coo);
    coo = 256*118 + 123;
    nz.push_back(coo);
    coo = 256*120 + 121;
    nz.push_back(coo);
    coo = 256*120 + 123;
    nz.push_back(coo);
    coo = 256*120 + 187;
    nz.push_back(coo);
    coo = 256*121 + 122;
    nz.push_back(coo);
    coo = 256*122 + 127;
    nz.push_back(coo);
    coo = 256*124 + 125;
    nz.push_back(coo);
    coo = 256*124 + 127;
    nz.push_back(coo);
    coo = 256*124 + 191;
    nz.push_back(coo);
    coo = 256*125 + 126;
    nz.push_back(coo);
    coo = 256*128 + 129;
    nz.push_back(coo);
    coo = 256*128 + 131;
    nz.push_back(coo);
    coo = 256*128 + 195;
    nz.push_back(coo);
    coo = 256*129 + 130;
    nz.push_back(coo);
    coo = 256*129 + 178;
    nz.push_back(coo);
    coo = 256*130 + 135;
    nz.push_back(coo);
    coo = 256*130 + 145;
    nz.push_back(coo);
    coo = 256*131 + 142;
    nz.push_back(coo);
    coo = 256*132 + 133;
    nz.push_back(coo);
    coo = 256*132 + 135;
    nz.push_back(coo);
    coo = 256*132 + 199;
    nz.push_back(coo);
    coo = 256*133 + 134;
    nz.push_back(coo);
    coo = 256*133 + 182;
    nz.push_back(coo);
    coo = 256*134 + 139;
    nz.push_back(coo);
    coo = 256*134 + 149;
    nz.push_back(coo);
    coo = 256*136 + 137;
    nz.push_back(coo);
    coo = 256*136 + 139;
    nz.push_back(coo);
    coo = 256*136 + 203;
    nz.push_back(coo);
    coo = 256*137 + 138;
    nz.push_back(coo);
    coo = 256*137 + 186;
    nz.push_back(coo);
    coo = 256*138 + 143;
    nz.push_back(coo);
    coo = 256*138 + 153;
    nz.push_back(coo);
    coo = 256*140 + 141;
    nz.push_back(coo);
    coo = 256*140 + 143;
    nz.push_back(coo);
    coo = 256*140 + 207;
    nz.push_back(coo);
    coo = 256*141 + 142;
    nz.push_back(coo);
    coo = 256*141 + 190;
    nz.push_back(coo);
    coo = 256*142 + 157;
    nz.push_back(coo);
    coo = 256*144 + 145;
    nz.push_back(coo);
    coo = 256*144 + 147;
    nz.push_back(coo);
    coo = 256*144 + 211;
    nz.push_back(coo);
    coo = 256*145 + 146;
    nz.push_back(coo);
    coo = 256*146 + 151;
    nz.push_back(coo);
    coo = 256*146 + 161;
    nz.push_back(coo);
    coo = 256*147 + 158;
    nz.push_back(coo);
    coo = 256*148 + 149;
    nz.push_back(coo);
    coo = 256*148 + 151;
    nz.push_back(coo);
    coo = 256*148 + 215;
    nz.push_back(coo);
    coo = 256*149 + 150;
    nz.push_back(coo);
    coo = 256*150 + 155;
    nz.push_back(coo);
    coo = 256*150 + 165;
    nz.push_back(coo);
    coo = 256*152 + 153;
    nz.push_back(coo);
    coo = 256*152 + 155;
    nz.push_back(coo);
    coo = 256*152 + 219;
    nz.push_back(coo);
    coo = 256*153 + 154;
    nz.push_back(coo);
    coo = 256*154 + 159;
    nz.push_back(coo);
    coo = 256*154 + 169;
    nz.push_back(coo);
    coo = 256*156 + 157;
    nz.push_back(coo);
    coo = 256*156 + 159;
    nz.push_back(coo);
    coo = 256*156 + 223;
    nz.push_back(coo);
    coo = 256*157 + 158;
    nz.push_back(coo);
    coo = 256*158 + 173;
    nz.push_back(coo);
    coo = 256*160 + 161;
    nz.push_back(coo);
    coo = 256*160 + 163;
    nz.push_back(coo);
    coo = 256*160 + 227;
    nz.push_back(coo);
    coo = 256*161 + 162;
    nz.push_back(coo);
    coo = 256*162 + 167;
    nz.push_back(coo);
    coo = 256*162 + 177;
    nz.push_back(coo);
    coo = 256*163 + 174;
    nz.push_back(coo);
    coo = 256*164 + 165;
    nz.push_back(coo);
    coo = 256*164 + 167;
    nz.push_back(coo);
    coo = 256*164 + 231;
    nz.push_back(coo);
    coo = 256*165 + 166;
    nz.push_back(coo);
    coo = 256*166 + 171;
    nz.push_back(coo);
    coo = 256*166 + 181;
    nz.push_back(coo);
    coo = 256*168 + 169;
    nz.push_back(coo);
    coo = 256*168 + 171;
    nz.push_back(coo);
    coo = 256*168 + 235;
    nz.push_back(coo);
    coo = 256*169 + 170;
    nz.push_back(coo);
    coo = 256*170 + 175;
    nz.push_back(coo);
    coo = 256*170 + 185;
    nz.push_back(coo);
    coo = 256*172 + 173;
    nz.push_back(coo);
    coo = 256*172 + 175;
    nz.push_back(coo);
    coo = 256*172 + 239;
    nz.push_back(coo);
    coo = 256*173 + 174;
    nz.push_back(coo);
    coo = 256*174 + 189;
    nz.push_back(coo);
    coo = 256*176 + 177;
    nz.push_back(coo);
    coo = 256*176 + 179;
    nz.push_back(coo);
    coo = 256*176 + 243;
    nz.push_back(coo);
    coo = 256*177 + 178;
    nz.push_back(coo);
    coo = 256*178 + 183;
    nz.push_back(coo);
    coo = 256*179 + 190;
    nz.push_back(coo);
    coo = 256*180 + 181;
    nz.push_back(coo);
    coo = 256*180 + 183;
    nz.push_back(coo);
    coo = 256*180 + 247;
    nz.push_back(coo);
    coo = 256*181 + 182;
    nz.push_back(coo);
    coo = 256*182 + 187;
    nz.push_back(coo);
    coo = 256*184 + 185;
    nz.push_back(coo);
    coo = 256*184 + 187;
    nz.push_back(coo);
    coo = 256*184 + 251;
    nz.push_back(coo);
    coo = 256*185 + 186;
    nz.push_back(coo);
    coo = 256*186 + 191;
    nz.push_back(coo);
    coo = 256*188 + 189;
    nz.push_back(coo);
    coo = 256*188 + 191;
    nz.push_back(coo);
    coo = 256*188 + 255;
    nz.push_back(coo);
    coo = 256*189 + 190;
    nz.push_back(coo);
    coo = 256*192 + 193;
    nz.push_back(coo);
    coo = 256*192 + 195;
    nz.push_back(coo);
    coo = 256*193 + 194;
    nz.push_back(coo);
    coo = 256*193 + 242;
    nz.push_back(coo);
    coo = 256*194 + 199;
    nz.push_back(coo);
    coo = 256*194 + 209;
    nz.push_back(coo);
    coo = 256*195 + 206;
    nz.push_back(coo);
    coo = 256*196 + 197;
    nz.push_back(coo);
    coo = 256*196 + 199;
    nz.push_back(coo);
    coo = 256*197 + 198;
    nz.push_back(coo);
    coo = 256*197 + 246;
    nz.push_back(coo);
    coo = 256*198 + 203;
    nz.push_back(coo);
    coo = 256*198 + 213;
    nz.push_back(coo);
    coo = 256*200 + 201;
    nz.push_back(coo);
    coo = 256*200 + 203;
    nz.push_back(coo);
    coo = 256*201 + 202;
    nz.push_back(coo);
    coo = 256*201 + 250;
    nz.push_back(coo);
    coo = 256*202 + 207;
    nz.push_back(coo);
    coo = 256*202 + 217;
    nz.push_back(coo);
    coo = 256*204 + 205;
    nz.push_back(coo);
    coo = 256*204 + 207;
    nz.push_back(coo);
    coo = 256*205 + 206;
    nz.push_back(coo);
    coo = 256*205 + 254;
    nz.push_back(coo);
    coo = 256*206 + 221;
    nz.push_back(coo);
    coo = 256*208 + 209;
    nz.push_back(coo);
    coo = 256*208 + 211;
    nz.push_back(coo);
    coo = 256*209 + 210;
    nz.push_back(coo);
    coo = 256*210 + 215;
    nz.push_back(coo);
    coo = 256*210 + 225;
    nz.push_back(coo);
    coo = 256*211 + 222;
    nz.push_back(coo);
    coo = 256*212 + 213;
    nz.push_back(coo);
    coo = 256*212 + 215;
    nz.push_back(coo);
    coo = 256*213 + 214;
    nz.push_back(coo);
    coo = 256*214 + 219;
    nz.push_back(coo);
    coo = 256*214 + 229;
    nz.push_back(coo);
    coo = 256*216 + 217;
    nz.push_back(coo);
    coo = 256*216 + 219;
    nz.push_back(coo);
    coo = 256*217 + 218;
    nz.push_back(coo);
    coo = 256*218 + 223;
    nz.push_back(coo);
    coo = 256*218 + 233;
    nz.push_back(coo);
    coo = 256*220 + 221;
    nz.push_back(coo);
    coo = 256*220 + 223;
    nz.push_back(coo);
    coo = 256*221 + 222;
    nz.push_back(coo);
    coo = 256*222 + 237;
    nz.push_back(coo);
    coo = 256*224 + 225;
    nz.push_back(coo);
    coo = 256*224 + 227;
    nz.push_back(coo);
    coo = 256*225 + 226;
    nz.push_back(coo);
    coo = 256*226 + 231;
    nz.push_back(coo);
    coo = 256*226 + 241;
    nz.push_back(coo);
    coo = 256*227 + 238;
    nz.push_back(coo);
    coo = 256*228 + 229;
    nz.push_back(coo);
    coo = 256*228 + 231;
    nz.push_back(coo);
    coo = 256*229 + 230;
    nz.push_back(coo);
    coo = 256*230 + 235;
    nz.push_back(coo);
    coo = 256*230 + 245;
    nz.push_back(coo);
    coo = 256*232 + 233;
    nz.push_back(coo);
    coo = 256*232 + 235;
    nz.push_back(coo);
    coo = 256*233 + 234;
    nz.push_back(coo);
    coo = 256*234 + 239;
    nz.push_back(coo);
    coo = 256*234 + 249;
    nz.push_back(coo);
    coo = 256*236 + 237;
    nz.push_back(coo);
    coo = 256*236 + 239;
    nz.push_back(coo);
    coo = 256*237 + 238;
    nz.push_back(coo);
    coo = 256*238 + 253;
    nz.push_back(coo);
    coo = 256*240 + 241;
    nz.push_back(coo);
    coo = 256*240 + 243;
    nz.push_back(coo);
    coo = 256*241 + 242;
    nz.push_back(coo);
    coo = 256*242 + 247;
    nz.push_back(coo);
    coo = 256*243 + 254;
    nz.push_back(coo);
    coo = 256*244 + 245;
    nz.push_back(coo);
    coo = 256*244 + 247;
    nz.push_back(coo);
    coo = 256*245 + 246;
    nz.push_back(coo);
    coo = 256*246 + 251;
    nz.push_back(coo);
    coo = 256*248 + 249;
    nz.push_back(coo);
    coo = 256*248 + 251;
    nz.push_back(coo);
    coo = 256*249 + 250;
    nz.push_back(coo);
    coo = 256*250 + 255;
    nz.push_back(coo);
    coo = 256*252 + 253;
    nz.push_back(coo);
    coo = 256*252 + 255;
    nz.push_back(coo);
    coo = 256*253 + 254;
    nz.push_back(coo);
    return nz;
}

Mat<int> create_plaquettes()
{
   Mat<int> P(256,10);
   P(0, 0) = 256*0+1;
   P(0, 1) = 256*1+2;
   P(0, 2) = 256*2+17;
   P(0, 3) = 256*17+16;
   P(0, 4) = 256*16+19;
   P(0, 5) = 256*19+30;
   P(0, 6) = 256*30+29;
   P(0, 7) = 256*29+14;
   P(0, 8) = 256*14+3;
   P(0, 9) = 256*3+0;
   P(1, 0) = 256*0+1;
   P(1, 1) = 256*1+2;
   P(1, 2) = 256*2+17;
   P(1, 3) = 256*17+16;
   P(1, 4) = 256*16+83;
   P(1, 5) = 256*83+94;
   P(1, 6) = 256*94+93;
   P(1, 7) = 256*93+78;
   P(1, 8) = 256*78+67;
   P(1, 9) = 256*67+0;
   P(2, 0) = 256*0+1;
   P(2, 1) = 256*1+2;
   P(2, 2) = 256*2+7;
   P(2, 3) = 256*7+4;
   P(2, 4) = 256*4+71;
   P(2, 5) = 256*71+66;
   P(2, 6) = 256*66+65;
   P(2, 7) = 256*65+64;
   P(2, 8) = 256*64+67;
   P(2, 9) = 256*67+0;
   P(3, 0) = 256*0+1;
   P(3, 1) = 256*1+2;
   P(3, 2) = 256*2+7;
   P(3, 3) = 256*7+196;
   P(3, 4) = 256*196+199;
   P(3, 5) = 256*199+194;
   P(3, 6) = 256*194+193;
   P(3, 7) = 256*193+192;
   P(3, 8) = 256*192+3;
   P(3, 9) = 256*3+0;
   P(4, 0) = 256*0+1;
   P(4, 1) = 256*1+50;
   P(4, 2) = 256*50+49;
   P(4, 3) = 256*49+48;
   P(4, 4) = 256*48+51;
   P(4, 5) = 256*51+62;
   P(4, 6) = 256*62+13;
   P(4, 7) = 256*13+14;
   P(4, 8) = 256*14+3;
   P(4, 9) = 256*3+0;
   P(5, 0) = 256*0+1;
   P(5, 1) = 256*1+50;
   P(5, 2) = 256*50+49;
   P(5, 3) = 256*49+48;
   P(5, 4) = 256*48+115;
   P(5, 5) = 256*115+126;
   P(5, 6) = 256*126+77;
   P(5, 7) = 256*77+78;
   P(5, 8) = 256*78+67;
   P(5, 9) = 256*67+0;
   P(6, 0) = 256*0+1;
   P(6, 1) = 256*1+50;
   P(6, 2) = 256*50+55;
   P(6, 3) = 256*55+52;
   P(6, 4) = 256*52+119;
   P(6, 5) = 256*119+114;
   P(6, 6) = 256*114+65;
   P(6, 7) = 256*65+64;
   P(6, 8) = 256*64+67;
   P(6, 9) = 256*67+0;
   P(7, 0) = 256*0+1;
   P(7, 1) = 256*1+50;
   P(7, 2) = 256*50+55;
   P(7, 3) = 256*55+244;
   P(7, 4) = 256*244+247;
   P(7, 5) = 256*247+242;
   P(7, 6) = 256*242+193;
   P(7, 7) = 256*193+192;
   P(7, 8) = 256*192+3;
   P(7, 9) = 256*3+0;
   P(8, 0) = 256*0+3;
   P(8, 1) = 256*3+14;
   P(8, 2) = 256*14+13;
   P(8, 3) = 256*13+12;
   P(8, 4) = 256*12+79;
   P(8, 5) = 256*79+76;
   P(8, 6) = 256*76+77;
   P(8, 7) = 256*77+78;
   P(8, 8) = 256*78+67;
   P(8, 9) = 256*67+0;
   P(9, 0) = 256*0+3;
   P(9, 1) = 256*3+14;
   P(9, 2) = 256*14+29;
   P(9, 3) = 256*29+28;
   P(9, 4) = 256*28+95;
   P(9, 5) = 256*95+92;
   P(9, 6) = 256*92+93;
   P(9, 7) = 256*93+78;
   P(9, 8) = 256*78+67;
   P(9, 9) = 256*67+0;
   P(10, 0) = 256*1+2;
   P(10, 1) = 256*2+7;
   P(10, 2) = 256*7+4;
   P(10, 3) = 256*4+5;
   P(10, 4) = 256*5+54;
   P(10, 5) = 256*54+53;
   P(10, 6) = 256*53+52;
   P(10, 7) = 256*52+55;
   P(10, 8) = 256*55+50;
   P(10, 9) = 256*50+1;
   P(11, 0) = 256*1+2;
   P(11, 1) = 256*2+7;
   P(11, 2) = 256*7+196;
   P(11, 3) = 256*196+197;
   P(11, 4) = 256*197+246;
   P(11, 5) = 256*246+245;
   P(11, 6) = 256*245+244;
   P(11, 7) = 256*244+55;
   P(11, 8) = 256*55+50;
   P(11, 9) = 256*50+1;
   P(12, 0) = 256*2+17;
   P(12, 1) = 256*17+16;
   P(12, 2) = 256*16+19;
   P(12, 3) = 256*19+208;
   P(12, 4) = 256*208+209;
   P(12, 5) = 256*209+194;
   P(12, 6) = 256*194+199;
   P(12, 7) = 256*199+196;
   P(12, 8) = 256*196+7;
   P(12, 9) = 256*7+2;
   P(13, 0) = 256*2+17;
   P(13, 1) = 256*17+16;
   P(13, 2) = 256*16+83;
   P(13, 3) = 256*83+80;
   P(13, 4) = 256*80+81;
   P(13, 5) = 256*81+66;
   P(13, 6) = 256*66+71;
   P(13, 7) = 256*71+4;
   P(13, 8) = 256*4+7;
   P(13, 9) = 256*7+2;
   P(14, 0) = 256*2+17;
   P(14, 1) = 256*17+18;
   P(14, 2) = 256*18+23;
   P(14, 3) = 256*23+20;
   P(14, 4) = 256*20+21;
   P(14, 5) = 256*21+6;
   P(14, 6) = 256*6+5;
   P(14, 7) = 256*5+4;
   P(14, 8) = 256*4+7;
   P(14, 9) = 256*7+2;
   P(15, 0) = 256*2+17;
   P(15, 1) = 256*17+18;
   P(15, 2) = 256*18+23;
   P(15, 3) = 256*23+212;
   P(15, 4) = 256*212+213;
   P(15, 5) = 256*213+198;
   P(15, 6) = 256*198+197;
   P(15, 7) = 256*197+196;
   P(15, 8) = 256*196+7;
   P(15, 9) = 256*7+2;
   P(16, 0) = 256*3+192;
   P(16, 1) = 256*192+193;
   P(16, 2) = 256*193+194;
   P(16, 3) = 256*194+209;
   P(16, 4) = 256*209+208;
   P(16, 5) = 256*208+19;
   P(16, 6) = 256*19+30;
   P(16, 7) = 256*30+29;
   P(16, 8) = 256*29+14;
   P(16, 9) = 256*14+3;
   P(17, 0) = 256*3+192;
   P(17, 1) = 256*192+193;
   P(17, 2) = 256*193+242;
   P(17, 3) = 256*242+241;
   P(17, 4) = 256*241+240;
   P(17, 5) = 256*240+51;
   P(17, 6) = 256*51+62;
   P(17, 7) = 256*62+13;
   P(17, 8) = 256*13+14;
   P(17, 9) = 256*14+3;
   P(18, 0) = 256*3+192;
   P(18, 1) = 256*192+195;
   P(18, 2) = 256*195+206;
   P(18, 3) = 256*206+205;
   P(18, 4) = 256*205+204;
   P(18, 5) = 256*204+15;
   P(18, 6) = 256*15+12;
   P(18, 7) = 256*12+13;
   P(18, 8) = 256*13+14;
   P(18, 9) = 256*14+3;
   P(19, 0) = 256*3+192;
   P(19, 1) = 256*192+195;
   P(19, 2) = 256*195+206;
   P(19, 3) = 256*206+221;
   P(19, 4) = 256*221+220;
   P(19, 5) = 256*220+31;
   P(19, 6) = 256*31+28;
   P(19, 7) = 256*28+29;
   P(19, 8) = 256*29+14;
   P(19, 9) = 256*14+3;
   P(20, 0) = 256*4+5;
   P(20, 1) = 256*5+6;
   P(20, 2) = 256*6+21;
   P(20, 3) = 256*21+20;
   P(20, 4) = 256*20+87;
   P(20, 5) = 256*87+82;
   P(20, 6) = 256*82+81;
   P(20, 7) = 256*81+66;
   P(20, 8) = 256*66+71;
   P(20, 9) = 256*71+4;
   P(21, 0) = 256*4+5;
   P(21, 1) = 256*5+6;
   P(21, 2) = 256*6+11;
   P(21, 3) = 256*11+8;
   P(21, 4) = 256*8+75;
   P(21, 5) = 256*75+70;
   P(21, 6) = 256*70+69;
   P(21, 7) = 256*69+68;
   P(21, 8) = 256*68+71;
   P(21, 9) = 256*71+4;
   P(22, 0) = 256*4+5;
   P(22, 1) = 256*5+6;
   P(22, 2) = 256*6+11;
   P(22, 3) = 256*11+200;
   P(22, 4) = 256*200+203;
   P(22, 5) = 256*203+198;
   P(22, 6) = 256*198+197;
   P(22, 7) = 256*197+196;
   P(22, 8) = 256*196+7;
   P(22, 9) = 256*7+4;
   P(23, 0) = 256*4+5;
   P(23, 1) = 256*5+54;
   P(23, 2) = 256*54+53;
   P(23, 3) = 256*53+52;
   P(23, 4) = 256*52+119;
   P(23, 5) = 256*119+114;
   P(23, 6) = 256*114+65;
   P(23, 7) = 256*65+66;
   P(23, 8) = 256*66+71;
   P(23, 9) = 256*71+4;
   P(24, 0) = 256*4+5;
   P(24, 1) = 256*5+54;
   P(24, 2) = 256*54+59;
   P(24, 3) = 256*59+56;
   P(24, 4) = 256*56+123;
   P(24, 5) = 256*123+118;
   P(24, 6) = 256*118+69;
   P(24, 7) = 256*69+68;
   P(24, 8) = 256*68+71;
   P(24, 9) = 256*71+4;
   P(25, 0) = 256*4+5;
   P(25, 1) = 256*5+54;
   P(25, 2) = 256*54+59;
   P(25, 3) = 256*59+248;
   P(25, 4) = 256*248+251;
   P(25, 5) = 256*251+246;
   P(25, 6) = 256*246+197;
   P(25, 7) = 256*197+196;
   P(25, 8) = 256*196+7;
   P(25, 9) = 256*7+4;
   P(26, 0) = 256*5+6;
   P(26, 1) = 256*6+11;
   P(26, 2) = 256*11+8;
   P(26, 3) = 256*8+9;
   P(26, 4) = 256*9+58;
   P(26, 5) = 256*58+57;
   P(26, 6) = 256*57+56;
   P(26, 7) = 256*56+59;
   P(26, 8) = 256*59+54;
   P(26, 9) = 256*54+5;
   P(27, 0) = 256*5+6;
   P(27, 1) = 256*6+11;
   P(27, 2) = 256*11+200;
   P(27, 3) = 256*200+201;
   P(27, 4) = 256*201+250;
   P(27, 5) = 256*250+249;
   P(27, 6) = 256*249+248;
   P(27, 7) = 256*248+59;
   P(27, 8) = 256*59+54;
   P(27, 9) = 256*54+5;
   P(28, 0) = 256*6+21;
   P(28, 1) = 256*21+20;
   P(28, 2) = 256*20+23;
   P(28, 3) = 256*23+212;
   P(28, 4) = 256*212+213;
   P(28, 5) = 256*213+198;
   P(28, 6) = 256*198+203;
   P(28, 7) = 256*203+200;
   P(28, 8) = 256*200+11;
   P(28, 9) = 256*11+6;
   P(29, 0) = 256*6+21;
   P(29, 1) = 256*21+20;
   P(29, 2) = 256*20+87;
   P(29, 3) = 256*87+84;
   P(29, 4) = 256*84+85;
   P(29, 5) = 256*85+70;
   P(29, 6) = 256*70+75;
   P(29, 7) = 256*75+8;
   P(29, 8) = 256*8+11;
   P(29, 9) = 256*11+6;
   P(30, 0) = 256*6+21;
   P(30, 1) = 256*21+22;
   P(30, 2) = 256*22+27;
   P(30, 3) = 256*27+24;
   P(30, 4) = 256*24+25;
   P(30, 5) = 256*25+10;
   P(30, 6) = 256*10+9;
   P(30, 7) = 256*9+8;
   P(30, 8) = 256*8+11;
   P(30, 9) = 256*11+6;
   P(31, 0) = 256*6+21;
   P(31, 1) = 256*21+22;
   P(31, 2) = 256*22+27;
   P(31, 3) = 256*27+216;
   P(31, 4) = 256*216+217;
   P(31, 5) = 256*217+202;
   P(31, 6) = 256*202+201;
   P(31, 7) = 256*201+200;
   P(31, 8) = 256*200+11;
   P(31, 9) = 256*11+6;
   P(32, 0) = 256*8+9;
   P(32, 1) = 256*9+10;
   P(32, 2) = 256*10+25;
   P(32, 3) = 256*25+24;
   P(32, 4) = 256*24+91;
   P(32, 5) = 256*91+86;
   P(32, 6) = 256*86+85;
   P(32, 7) = 256*85+70;
   P(32, 8) = 256*70+75;
   P(32, 9) = 256*75+8;
   P(33, 0) = 256*8+9;
   P(33, 1) = 256*9+10;
   P(33, 2) = 256*10+15;
   P(33, 3) = 256*15+12;
   P(33, 4) = 256*12+79;
   P(33, 5) = 256*79+74;
   P(33, 6) = 256*74+73;
   P(33, 7) = 256*73+72;
   P(33, 8) = 256*72+75;
   P(33, 9) = 256*75+8;
   P(34, 0) = 256*8+9;
   P(34, 1) = 256*9+10;
   P(34, 2) = 256*10+15;
   P(34, 3) = 256*15+204;
   P(34, 4) = 256*204+207;
   P(34, 5) = 256*207+202;
   P(34, 6) = 256*202+201;
   P(34, 7) = 256*201+200;
   P(34, 8) = 256*200+11;
   P(34, 9) = 256*11+8;
   P(35, 0) = 256*8+9;
   P(35, 1) = 256*9+58;
   P(35, 2) = 256*58+57;
   P(35, 3) = 256*57+56;
   P(35, 4) = 256*56+123;
   P(35, 5) = 256*123+118;
   P(35, 6) = 256*118+69;
   P(35, 7) = 256*69+70;
   P(35, 8) = 256*70+75;
   P(35, 9) = 256*75+8;
   P(36, 0) = 256*8+9;
   P(36, 1) = 256*9+58;
   P(36, 2) = 256*58+63;
   P(36, 3) = 256*63+60;
   P(36, 4) = 256*60+127;
   P(36, 5) = 256*127+122;
   P(36, 6) = 256*122+73;
   P(36, 7) = 256*73+72;
   P(36, 8) = 256*72+75;
   P(36, 9) = 256*75+8;
   P(37, 0) = 256*8+9;
   P(37, 1) = 256*9+58;
   P(37, 2) = 256*58+63;
   P(37, 3) = 256*63+252;
   P(37, 4) = 256*252+255;
   P(37, 5) = 256*255+250;
   P(37, 6) = 256*250+201;
   P(37, 7) = 256*201+200;
   P(37, 8) = 256*200+11;
   P(37, 9) = 256*11+8;
   P(38, 0) = 256*9+10;
   P(38, 1) = 256*10+15;
   P(38, 2) = 256*15+12;
   P(38, 3) = 256*12+13;
   P(38, 4) = 256*13+62;
   P(38, 5) = 256*62+61;
   P(38, 6) = 256*61+60;
   P(38, 7) = 256*60+63;
   P(38, 8) = 256*63+58;
   P(38, 9) = 256*58+9;
   P(39, 0) = 256*9+10;
   P(39, 1) = 256*10+15;
   P(39, 2) = 256*15+204;
   P(39, 3) = 256*204+205;
   P(39, 4) = 256*205+254;
   P(39, 5) = 256*254+253;
   P(39, 6) = 256*253+252;
   P(39, 7) = 256*252+63;
   P(39, 8) = 256*63+58;
   P(39, 9) = 256*58+9;
   P(40, 0) = 256*10+25;
   P(40, 1) = 256*25+24;
   P(40, 2) = 256*24+27;
   P(40, 3) = 256*27+216;
   P(40, 4) = 256*216+217;
   P(40, 5) = 256*217+202;
   P(40, 6) = 256*202+207;
   P(40, 7) = 256*207+204;
   P(40, 8) = 256*204+15;
   P(40, 9) = 256*15+10;
   P(41, 0) = 256*10+25;
   P(41, 1) = 256*25+24;
   P(41, 2) = 256*24+91;
   P(41, 3) = 256*91+88;
   P(41, 4) = 256*88+89;
   P(41, 5) = 256*89+74;
   P(41, 6) = 256*74+79;
   P(41, 7) = 256*79+12;
   P(41, 8) = 256*12+15;
   P(41, 9) = 256*15+10;
   P(42, 0) = 256*10+25;
   P(42, 1) = 256*25+26;
   P(42, 2) = 256*26+31;
   P(42, 3) = 256*31+28;
   P(42, 4) = 256*28+29;
   P(42, 5) = 256*29+14;
   P(42, 6) = 256*14+13;
   P(42, 7) = 256*13+12;
   P(42, 8) = 256*12+15;
   P(42, 9) = 256*15+10;
   P(43, 0) = 256*10+25;
   P(43, 1) = 256*25+26;
   P(43, 2) = 256*26+31;
   P(43, 3) = 256*31+220;
   P(43, 4) = 256*220+221;
   P(43, 5) = 256*221+206;
   P(43, 6) = 256*206+205;
   P(43, 7) = 256*205+204;
   P(43, 8) = 256*204+15;
   P(43, 9) = 256*15+10;
   P(44, 0) = 256*12+13;
   P(44, 1) = 256*13+14;
   P(44, 2) = 256*14+29;
   P(44, 3) = 256*29+28;
   P(44, 4) = 256*28+95;
   P(44, 5) = 256*95+90;
   P(44, 6) = 256*90+89;
   P(44, 7) = 256*89+74;
   P(44, 8) = 256*74+79;
   P(44, 9) = 256*79+12;
   P(45, 0) = 256*12+13;
   P(45, 1) = 256*13+62;
   P(45, 2) = 256*62+61;
   P(45, 3) = 256*61+60;
   P(45, 4) = 256*60+127;
   P(45, 5) = 256*127+122;
   P(45, 6) = 256*122+73;
   P(45, 7) = 256*73+74;
   P(45, 8) = 256*74+79;
   P(45, 9) = 256*79+12;
   P(46, 0) = 256*12+13;
   P(46, 1) = 256*13+62;
   P(46, 2) = 256*62+51;
   P(46, 3) = 256*51+48;
   P(46, 4) = 256*48+115;
   P(46, 5) = 256*115+126;
   P(46, 6) = 256*126+77;
   P(46, 7) = 256*77+76;
   P(46, 8) = 256*76+79;
   P(46, 9) = 256*79+12;
   P(47, 0) = 256*12+13;
   P(47, 1) = 256*13+62;
   P(47, 2) = 256*62+51;
   P(47, 3) = 256*51+240;
   P(47, 4) = 256*240+243;
   P(47, 5) = 256*243+254;
   P(47, 6) = 256*254+205;
   P(47, 7) = 256*205+204;
   P(47, 8) = 256*204+15;
   P(47, 9) = 256*15+12;
   P(48, 0) = 256*16+17;
   P(48, 1) = 256*17+18;
   P(48, 2) = 256*18+33;
   P(48, 3) = 256*33+32;
   P(48, 4) = 256*32+35;
   P(48, 5) = 256*35+46;
   P(48, 6) = 256*46+45;
   P(48, 7) = 256*45+30;
   P(48, 8) = 256*30+19;
   P(48, 9) = 256*19+16;
   P(49, 0) = 256*16+17;
   P(49, 1) = 256*17+18;
   P(49, 2) = 256*18+33;
   P(49, 3) = 256*33+32;
   P(49, 4) = 256*32+99;
   P(49, 5) = 256*99+110;
   P(49, 6) = 256*110+109;
   P(49, 7) = 256*109+94;
   P(49, 8) = 256*94+83;
   P(49, 9) = 256*83+16;
   P(50, 0) = 256*16+17;
   P(50, 1) = 256*17+18;
   P(50, 2) = 256*18+23;
   P(50, 3) = 256*23+20;
   P(50, 4) = 256*20+87;
   P(50, 5) = 256*87+82;
   P(50, 6) = 256*82+81;
   P(50, 7) = 256*81+80;
   P(50, 8) = 256*80+83;
   P(50, 9) = 256*83+16;
   P(51, 0) = 256*16+17;
   P(51, 1) = 256*17+18;
   P(51, 2) = 256*18+23;
   P(51, 3) = 256*23+212;
   P(51, 4) = 256*212+215;
   P(51, 5) = 256*215+210;
   P(51, 6) = 256*210+209;
   P(51, 7) = 256*209+208;
   P(51, 8) = 256*208+19;
   P(51, 9) = 256*19+16;
   P(52, 0) = 256*16+19;
   P(52, 1) = 256*19+30;
   P(52, 2) = 256*30+29;
   P(52, 3) = 256*29+28;
   P(52, 4) = 256*28+95;
   P(52, 5) = 256*95+92;
   P(52, 6) = 256*92+93;
   P(52, 7) = 256*93+94;
   P(52, 8) = 256*94+83;
   P(52, 9) = 256*83+16;
   P(53, 0) = 256*16+19;
   P(53, 1) = 256*19+30;
   P(53, 2) = 256*30+45;
   P(53, 3) = 256*45+44;
   P(53, 4) = 256*44+111;
   P(53, 5) = 256*111+108;
   P(53, 6) = 256*108+109;
   P(53, 7) = 256*109+94;
   P(53, 8) = 256*94+83;
   P(53, 9) = 256*83+16;
   P(54, 0) = 256*18+33;
   P(54, 1) = 256*33+32;
   P(54, 2) = 256*32+35;
   P(54, 3) = 256*35+224;
   P(54, 4) = 256*224+225;
   P(54, 5) = 256*225+210;
   P(54, 6) = 256*210+215;
   P(54, 7) = 256*215+212;
   P(54, 8) = 256*212+23;
   P(54, 9) = 256*23+18;
   P(55, 0) = 256*18+33;
   P(55, 1) = 256*33+32;
   P(55, 2) = 256*32+99;
   P(55, 3) = 256*99+96;
   P(55, 4) = 256*96+97;
   P(55, 5) = 256*97+82;
   P(55, 6) = 256*82+87;
   P(55, 7) = 256*87+20;
   P(55, 8) = 256*20+23;
   P(55, 9) = 256*23+18;
   P(56, 0) = 256*18+33;
   P(56, 1) = 256*33+34;
   P(56, 2) = 256*34+39;
   P(56, 3) = 256*39+36;
   P(56, 4) = 256*36+37;
   P(56, 5) = 256*37+22;
   P(56, 6) = 256*22+21;
   P(56, 7) = 256*21+20;
   P(56, 8) = 256*20+23;
   P(56, 9) = 256*23+18;
   P(57, 0) = 256*18+33;
   P(57, 1) = 256*33+34;
   P(57, 2) = 256*34+39;
   P(57, 3) = 256*39+228;
   P(57, 4) = 256*228+229;
   P(57, 5) = 256*229+214;
   P(57, 6) = 256*214+213;
   P(57, 7) = 256*213+212;
   P(57, 8) = 256*212+23;
   P(57, 9) = 256*23+18;
   P(58, 0) = 256*19+208;
   P(58, 1) = 256*208+209;
   P(58, 2) = 256*209+210;
   P(58, 3) = 256*210+225;
   P(58, 4) = 256*225+224;
   P(58, 5) = 256*224+35;
   P(58, 6) = 256*35+46;
   P(58, 7) = 256*46+45;
   P(58, 8) = 256*45+30;
   P(58, 9) = 256*30+19;
   P(59, 0) = 256*19+208;
   P(59, 1) = 256*208+211;
   P(59, 2) = 256*211+222;
   P(59, 3) = 256*222+221;
   P(59, 4) = 256*221+220;
   P(59, 5) = 256*220+31;
   P(59, 6) = 256*31+28;
   P(59, 7) = 256*28+29;
   P(59, 8) = 256*29+30;
   P(59, 9) = 256*30+19;
   P(60, 0) = 256*19+208;
   P(60, 1) = 256*208+211;
   P(60, 2) = 256*211+222;
   P(60, 3) = 256*222+237;
   P(60, 4) = 256*237+236;
   P(60, 5) = 256*236+47;
   P(60, 6) = 256*47+44;
   P(60, 7) = 256*44+45;
   P(60, 8) = 256*45+30;
   P(60, 9) = 256*30+19;
   P(61, 0) = 256*20+21;
   P(61, 1) = 256*21+22;
   P(61, 2) = 256*22+37;
   P(61, 3) = 256*37+36;
   P(61, 4) = 256*36+103;
   P(61, 5) = 256*103+98;
   P(61, 6) = 256*98+97;
   P(61, 7) = 256*97+82;
   P(61, 8) = 256*82+87;
   P(61, 9) = 256*87+20;
   P(62, 0) = 256*20+21;
   P(62, 1) = 256*21+22;
   P(62, 2) = 256*22+27;
   P(62, 3) = 256*27+24;
   P(62, 4) = 256*24+91;
   P(62, 5) = 256*91+86;
   P(62, 6) = 256*86+85;
   P(62, 7) = 256*85+84;
   P(62, 8) = 256*84+87;
   P(62, 9) = 256*87+20;
   P(63, 0) = 256*20+21;
   P(63, 1) = 256*21+22;
   P(63, 2) = 256*22+27;
   P(63, 3) = 256*27+216;
   P(63, 4) = 256*216+219;
   P(63, 5) = 256*219+214;
   P(63, 6) = 256*214+213;
   P(63, 7) = 256*213+212;
   P(63, 8) = 256*212+23;
   P(63, 9) = 256*23+20;
   P(64, 0) = 256*22+37;
   P(64, 1) = 256*37+36;
   P(64, 2) = 256*36+39;
   P(64, 3) = 256*39+228;
   P(64, 4) = 256*228+229;
   P(64, 5) = 256*229+214;
   P(64, 6) = 256*214+219;
   P(64, 7) = 256*219+216;
   P(64, 8) = 256*216+27;
   P(64, 9) = 256*27+22;
   P(65, 0) = 256*22+37;
   P(65, 1) = 256*37+36;
   P(65, 2) = 256*36+103;
   P(65, 3) = 256*103+100;
   P(65, 4) = 256*100+101;
   P(65, 5) = 256*101+86;
   P(65, 6) = 256*86+91;
   P(65, 7) = 256*91+24;
   P(65, 8) = 256*24+27;
   P(65, 9) = 256*27+22;
   P(66, 0) = 256*22+37;
   P(66, 1) = 256*37+38;
   P(66, 2) = 256*38+43;
   P(66, 3) = 256*43+40;
   P(66, 4) = 256*40+41;
   P(66, 5) = 256*41+26;
   P(66, 6) = 256*26+25;
   P(66, 7) = 256*25+24;
   P(66, 8) = 256*24+27;
   P(66, 9) = 256*27+22;
   P(67, 0) = 256*22+37;
   P(67, 1) = 256*37+38;
   P(67, 2) = 256*38+43;
   P(67, 3) = 256*43+232;
   P(67, 4) = 256*232+233;
   P(67, 5) = 256*233+218;
   P(67, 6) = 256*218+217;
   P(67, 7) = 256*217+216;
   P(67, 8) = 256*216+27;
   P(67, 9) = 256*27+22;
   P(68, 0) = 256*24+25;
   P(68, 1) = 256*25+26;
   P(68, 2) = 256*26+41;
   P(68, 3) = 256*41+40;
   P(68, 4) = 256*40+107;
   P(68, 5) = 256*107+102;
   P(68, 6) = 256*102+101;
   P(68, 7) = 256*101+86;
   P(68, 8) = 256*86+91;
   P(68, 9) = 256*91+24;
   P(69, 0) = 256*24+25;
   P(69, 1) = 256*25+26;
   P(69, 2) = 256*26+31;
   P(69, 3) = 256*31+28;
   P(69, 4) = 256*28+95;
   P(69, 5) = 256*95+90;
   P(69, 6) = 256*90+89;
   P(69, 7) = 256*89+88;
   P(69, 8) = 256*88+91;
   P(69, 9) = 256*91+24;
   P(70, 0) = 256*24+25;
   P(70, 1) = 256*25+26;
   P(70, 2) = 256*26+31;
   P(70, 3) = 256*31+220;
   P(70, 4) = 256*220+223;
   P(70, 5) = 256*223+218;
   P(70, 6) = 256*218+217;
   P(70, 7) = 256*217+216;
   P(70, 8) = 256*216+27;
   P(70, 9) = 256*27+24;
   P(71, 0) = 256*26+41;
   P(71, 1) = 256*41+40;
   P(71, 2) = 256*40+43;
   P(71, 3) = 256*43+232;
   P(71, 4) = 256*232+233;
   P(71, 5) = 256*233+218;
   P(71, 6) = 256*218+223;
   P(71, 7) = 256*223+220;
   P(71, 8) = 256*220+31;
   P(71, 9) = 256*31+26;
   P(72, 0) = 256*26+41;
   P(72, 1) = 256*41+40;
   P(72, 2) = 256*40+107;
   P(72, 3) = 256*107+104;
   P(72, 4) = 256*104+105;
   P(72, 5) = 256*105+90;
   P(72, 6) = 256*90+95;
   P(72, 7) = 256*95+28;
   P(72, 8) = 256*28+31;
   P(72, 9) = 256*31+26;
   P(73, 0) = 256*26+41;
   P(73, 1) = 256*41+42;
   P(73, 2) = 256*42+47;
   P(73, 3) = 256*47+44;
   P(73, 4) = 256*44+45;
   P(73, 5) = 256*45+30;
   P(73, 6) = 256*30+29;
   P(73, 7) = 256*29+28;
   P(73, 8) = 256*28+31;
   P(73, 9) = 256*31+26;
   P(74, 0) = 256*26+41;
   P(74, 1) = 256*41+42;
   P(74, 2) = 256*42+47;
   P(74, 3) = 256*47+236;
   P(74, 4) = 256*236+237;
   P(74, 5) = 256*237+222;
   P(74, 6) = 256*222+221;
   P(74, 7) = 256*221+220;
   P(74, 8) = 256*220+31;
   P(74, 9) = 256*31+26;
   P(75, 0) = 256*28+29;
   P(75, 1) = 256*29+30;
   P(75, 2) = 256*30+45;
   P(75, 3) = 256*45+44;
   P(75, 4) = 256*44+111;
   P(75, 5) = 256*111+106;
   P(75, 6) = 256*106+105;
   P(75, 7) = 256*105+90;
   P(75, 8) = 256*90+95;
   P(75, 9) = 256*95+28;
   P(76, 0) = 256*32+33;
   P(76, 1) = 256*33+34;
   P(76, 2) = 256*34+49;
   P(76, 3) = 256*49+48;
   P(76, 4) = 256*48+51;
   P(76, 5) = 256*51+62;
   P(76, 6) = 256*62+61;
   P(76, 7) = 256*61+46;
   P(76, 8) = 256*46+35;
   P(76, 9) = 256*35+32;
   P(77, 0) = 256*32+33;
   P(77, 1) = 256*33+34;
   P(77, 2) = 256*34+49;
   P(77, 3) = 256*49+48;
   P(77, 4) = 256*48+115;
   P(77, 5) = 256*115+126;
   P(77, 6) = 256*126+125;
   P(77, 7) = 256*125+110;
   P(77, 8) = 256*110+99;
   P(77, 9) = 256*99+32;
   P(78, 0) = 256*32+33;
   P(78, 1) = 256*33+34;
   P(78, 2) = 256*34+39;
   P(78, 3) = 256*39+36;
   P(78, 4) = 256*36+103;
   P(78, 5) = 256*103+98;
   P(78, 6) = 256*98+97;
   P(78, 7) = 256*97+96;
   P(78, 8) = 256*96+99;
   P(78, 9) = 256*99+32;
   P(79, 0) = 256*32+33;
   P(79, 1) = 256*33+34;
   P(79, 2) = 256*34+39;
   P(79, 3) = 256*39+228;
   P(79, 4) = 256*228+231;
   P(79, 5) = 256*231+226;
   P(79, 6) = 256*226+225;
   P(79, 7) = 256*225+224;
   P(79, 8) = 256*224+35;
   P(79, 9) = 256*35+32;
   P(80, 0) = 256*32+35;
   P(80, 1) = 256*35+46;
   P(80, 2) = 256*46+45;
   P(80, 3) = 256*45+44;
   P(80, 4) = 256*44+111;
   P(80, 5) = 256*111+108;
   P(80, 6) = 256*108+109;
   P(80, 7) = 256*109+110;
   P(80, 8) = 256*110+99;
   P(80, 9) = 256*99+32;
   P(81, 0) = 256*32+35;
   P(81, 1) = 256*35+46;
   P(81, 2) = 256*46+61;
   P(81, 3) = 256*61+60;
   P(81, 4) = 256*60+127;
   P(81, 5) = 256*127+124;
   P(81, 6) = 256*124+125;
   P(81, 7) = 256*125+110;
   P(81, 8) = 256*110+99;
   P(81, 9) = 256*99+32;
   P(82, 0) = 256*34+49;
   P(82, 1) = 256*49+48;
   P(82, 2) = 256*48+51;
   P(82, 3) = 256*51+240;
   P(82, 4) = 256*240+241;
   P(82, 5) = 256*241+226;
   P(82, 6) = 256*226+231;
   P(82, 7) = 256*231+228;
   P(82, 8) = 256*228+39;
   P(82, 9) = 256*39+34;
   P(83, 0) = 256*34+49;
   P(83, 1) = 256*49+48;
   P(83, 2) = 256*48+115;
   P(83, 3) = 256*115+112;
   P(83, 4) = 256*112+113;
   P(83, 5) = 256*113+98;
   P(83, 6) = 256*98+103;
   P(83, 7) = 256*103+36;
   P(83, 8) = 256*36+39;
   P(83, 9) = 256*39+34;
   P(84, 0) = 256*34+49;
   P(84, 1) = 256*49+50;
   P(84, 2) = 256*50+55;
   P(84, 3) = 256*55+52;
   P(84, 4) = 256*52+53;
   P(84, 5) = 256*53+38;
   P(84, 6) = 256*38+37;
   P(84, 7) = 256*37+36;
   P(84, 8) = 256*36+39;
   P(84, 9) = 256*39+34;
   P(85, 0) = 256*34+49;
   P(85, 1) = 256*49+50;
   P(85, 2) = 256*50+55;
   P(85, 3) = 256*55+244;
   P(85, 4) = 256*244+245;
   P(85, 5) = 256*245+230;
   P(85, 6) = 256*230+229;
   P(85, 7) = 256*229+228;
   P(85, 8) = 256*228+39;
   P(85, 9) = 256*39+34;
   P(86, 0) = 256*35+224;
   P(86, 1) = 256*224+225;
   P(86, 2) = 256*225+226;
   P(86, 3) = 256*226+241;
   P(86, 4) = 256*241+240;
   P(86, 5) = 256*240+51;
   P(86, 6) = 256*51+62;
   P(86, 7) = 256*62+61;
   P(86, 8) = 256*61+46;
   P(86, 9) = 256*46+35;
   P(87, 0) = 256*35+224;
   P(87, 1) = 256*224+227;
   P(87, 2) = 256*227+238;
   P(87, 3) = 256*238+237;
   P(87, 4) = 256*237+236;
   P(87, 5) = 256*236+47;
   P(87, 6) = 256*47+44;
   P(87, 7) = 256*44+45;
   P(87, 8) = 256*45+46;
   P(87, 9) = 256*46+35;
   P(88, 0) = 256*35+224;
   P(88, 1) = 256*224+227;
   P(88, 2) = 256*227+238;
   P(88, 3) = 256*238+253;
   P(88, 4) = 256*253+252;
   P(88, 5) = 256*252+63;
   P(88, 6) = 256*63+60;
   P(88, 7) = 256*60+61;
   P(88, 8) = 256*61+46;
   P(88, 9) = 256*46+35;
   P(89, 0) = 256*36+37;
   P(89, 1) = 256*37+38;
   P(89, 2) = 256*38+53;
   P(89, 3) = 256*53+52;
   P(89, 4) = 256*52+119;
   P(89, 5) = 256*119+114;
   P(89, 6) = 256*114+113;
   P(89, 7) = 256*113+98;
   P(89, 8) = 256*98+103;
   P(89, 9) = 256*103+36;
   P(90, 0) = 256*36+37;
   P(90, 1) = 256*37+38;
   P(90, 2) = 256*38+43;
   P(90, 3) = 256*43+40;
   P(90, 4) = 256*40+107;
   P(90, 5) = 256*107+102;
   P(90, 6) = 256*102+101;
   P(90, 7) = 256*101+100;
   P(90, 8) = 256*100+103;
   P(90, 9) = 256*103+36;
   P(91, 0) = 256*36+37;
   P(91, 1) = 256*37+38;
   P(91, 2) = 256*38+43;
   P(91, 3) = 256*43+232;
   P(91, 4) = 256*232+235;
   P(91, 5) = 256*235+230;
   P(91, 6) = 256*230+229;
   P(91, 7) = 256*229+228;
   P(91, 8) = 256*228+39;
   P(91, 9) = 256*39+36;
   P(92, 0) = 256*38+53;
   P(92, 1) = 256*53+52;
   P(92, 2) = 256*52+55;
   P(92, 3) = 256*55+244;
   P(92, 4) = 256*244+245;
   P(92, 5) = 256*245+230;
   P(92, 6) = 256*230+235;
   P(92, 7) = 256*235+232;
   P(92, 8) = 256*232+43;
   P(92, 9) = 256*43+38;
   P(93, 0) = 256*38+53;
   P(93, 1) = 256*53+52;
   P(93, 2) = 256*52+119;
   P(93, 3) = 256*119+116;
   P(93, 4) = 256*116+117;
   P(93, 5) = 256*117+102;
   P(93, 6) = 256*102+107;
   P(93, 7) = 256*107+40;
   P(93, 8) = 256*40+43;
   P(93, 9) = 256*43+38;
   P(94, 0) = 256*38+53;
   P(94, 1) = 256*53+54;
   P(94, 2) = 256*54+59;
   P(94, 3) = 256*59+56;
   P(94, 4) = 256*56+57;
   P(94, 5) = 256*57+42;
   P(94, 6) = 256*42+41;
   P(94, 7) = 256*41+40;
   P(94, 8) = 256*40+43;
   P(94, 9) = 256*43+38;
   P(95, 0) = 256*38+53;
   P(95, 1) = 256*53+54;
   P(95, 2) = 256*54+59;
   P(95, 3) = 256*59+248;
   P(95, 4) = 256*248+249;
   P(95, 5) = 256*249+234;
   P(95, 6) = 256*234+233;
   P(95, 7) = 256*233+232;
   P(95, 8) = 256*232+43;
   P(95, 9) = 256*43+38;
   P(96, 0) = 256*40+41;
   P(96, 1) = 256*41+42;
   P(96, 2) = 256*42+57;
   P(96, 3) = 256*57+56;
   P(96, 4) = 256*56+123;
   P(96, 5) = 256*123+118;
   P(96, 6) = 256*118+117;
   P(96, 7) = 256*117+102;
   P(96, 8) = 256*102+107;
   P(96, 9) = 256*107+40;
   P(97, 0) = 256*40+41;
   P(97, 1) = 256*41+42;
   P(97, 2) = 256*42+47;
   P(97, 3) = 256*47+44;
   P(97, 4) = 256*44+111;
   P(97, 5) = 256*111+106;
   P(97, 6) = 256*106+105;
   P(97, 7) = 256*105+104;
   P(97, 8) = 256*104+107;
   P(97, 9) = 256*107+40;
   P(98, 0) = 256*40+41;
   P(98, 1) = 256*41+42;
   P(98, 2) = 256*42+47;
   P(98, 3) = 256*47+236;
   P(98, 4) = 256*236+239;
   P(98, 5) = 256*239+234;
   P(98, 6) = 256*234+233;
   P(98, 7) = 256*233+232;
   P(98, 8) = 256*232+43;
   P(98, 9) = 256*43+40;
   P(99, 0) = 256*42+57;
   P(99, 1) = 256*57+56;
   P(99, 2) = 256*56+59;
   P(99, 3) = 256*59+248;
   P(99, 4) = 256*248+249;
   P(99, 5) = 256*249+234;
   P(99, 6) = 256*234+239;
   P(99, 7) = 256*239+236;
   P(99, 8) = 256*236+47;
   P(99, 9) = 256*47+42;
   P(100, 0) = 256*42+57;
   P(100, 1) = 256*57+56;
   P(100, 2) = 256*56+123;
   P(100, 3) = 256*123+120;
   P(100, 4) = 256*120+121;
   P(100, 5) = 256*121+106;
   P(100, 6) = 256*106+111;
   P(100, 7) = 256*111+44;
   P(100, 8) = 256*44+47;
   P(100, 9) = 256*47+42;
   P(101, 0) = 256*42+57;
   P(101, 1) = 256*57+58;
   P(101, 2) = 256*58+63;
   P(101, 3) = 256*63+60;
   P(101, 4) = 256*60+61;
   P(101, 5) = 256*61+46;
   P(101, 6) = 256*46+45;
   P(101, 7) = 256*45+44;
   P(101, 8) = 256*44+47;
   P(101, 9) = 256*47+42;
   P(102, 0) = 256*42+57;
   P(102, 1) = 256*57+58;
   P(102, 2) = 256*58+63;
   P(102, 3) = 256*63+252;
   P(102, 4) = 256*252+253;
   P(102, 5) = 256*253+238;
   P(102, 6) = 256*238+237;
   P(102, 7) = 256*237+236;
   P(102, 8) = 256*236+47;
   P(102, 9) = 256*47+42;
   P(103, 0) = 256*44+45;
   P(103, 1) = 256*45+46;
   P(103, 2) = 256*46+61;
   P(103, 3) = 256*61+60;
   P(103, 4) = 256*60+127;
   P(103, 5) = 256*127+122;
   P(103, 6) = 256*122+121;
   P(103, 7) = 256*121+106;
   P(103, 8) = 256*106+111;
   P(103, 9) = 256*111+44;
   P(104, 0) = 256*48+49;
   P(104, 1) = 256*49+50;
   P(104, 2) = 256*50+55;
   P(104, 3) = 256*55+52;
   P(104, 4) = 256*52+119;
   P(104, 5) = 256*119+114;
   P(104, 6) = 256*114+113;
   P(104, 7) = 256*113+112;
   P(104, 8) = 256*112+115;
   P(104, 9) = 256*115+48;
   P(105, 0) = 256*48+49;
   P(105, 1) = 256*49+50;
   P(105, 2) = 256*50+55;
   P(105, 3) = 256*55+244;
   P(105, 4) = 256*244+247;
   P(105, 5) = 256*247+242;
   P(105, 6) = 256*242+241;
   P(105, 7) = 256*241+240;
   P(105, 8) = 256*240+51;
   P(105, 9) = 256*51+48;
   P(106, 0) = 256*48+51;
   P(106, 1) = 256*51+62;
   P(106, 2) = 256*62+61;
   P(106, 3) = 256*61+60;
   P(106, 4) = 256*60+127;
   P(106, 5) = 256*127+124;
   P(106, 6) = 256*124+125;
   P(106, 7) = 256*125+126;
   P(106, 8) = 256*126+115;
   P(106, 9) = 256*115+48;
   P(107, 0) = 256*51+240;
   P(107, 1) = 256*240+243;
   P(107, 2) = 256*243+254;
   P(107, 3) = 256*254+253;
   P(107, 4) = 256*253+252;
   P(107, 5) = 256*252+63;
   P(107, 6) = 256*63+60;
   P(107, 7) = 256*60+61;
   P(107, 8) = 256*61+62;
   P(107, 9) = 256*62+51;
   P(108, 0) = 256*52+53;
   P(108, 1) = 256*53+54;
   P(108, 2) = 256*54+59;
   P(108, 3) = 256*59+56;
   P(108, 4) = 256*56+123;
   P(108, 5) = 256*123+118;
   P(108, 6) = 256*118+117;
   P(108, 7) = 256*117+116;
   P(108, 8) = 256*116+119;
   P(108, 9) = 256*119+52;
   P(109, 0) = 256*52+53;
   P(109, 1) = 256*53+54;
   P(109, 2) = 256*54+59;
   P(109, 3) = 256*59+248;
   P(109, 4) = 256*248+251;
   P(109, 5) = 256*251+246;
   P(109, 6) = 256*246+245;
   P(109, 7) = 256*245+244;
   P(109, 8) = 256*244+55;
   P(109, 9) = 256*55+52;
   P(110, 0) = 256*56+57;
   P(110, 1) = 256*57+58;
   P(110, 2) = 256*58+63;
   P(110, 3) = 256*63+60;
   P(110, 4) = 256*60+127;
   P(110, 5) = 256*127+122;
   P(110, 6) = 256*122+121;
   P(110, 7) = 256*121+120;
   P(110, 8) = 256*120+123;
   P(110, 9) = 256*123+56;
   P(111, 0) = 256*56+57;
   P(111, 1) = 256*57+58;
   P(111, 2) = 256*58+63;
   P(111, 3) = 256*63+252;
   P(111, 4) = 256*252+255;
   P(111, 5) = 256*255+250;
   P(111, 6) = 256*250+249;
   P(111, 7) = 256*249+248;
   P(111, 8) = 256*248+59;
   P(111, 9) = 256*59+56;
   P(112, 0) = 256*64+65;
   P(112, 1) = 256*65+66;
   P(112, 2) = 256*66+81;
   P(112, 3) = 256*81+80;
   P(112, 4) = 256*80+83;
   P(112, 5) = 256*83+94;
   P(112, 6) = 256*94+93;
   P(112, 7) = 256*93+78;
   P(112, 8) = 256*78+67;
   P(112, 9) = 256*67+64;
   P(113, 0) = 256*64+65;
   P(113, 1) = 256*65+66;
   P(113, 2) = 256*66+81;
   P(113, 3) = 256*81+80;
   P(113, 4) = 256*80+147;
   P(113, 5) = 256*147+158;
   P(113, 6) = 256*158+157;
   P(113, 7) = 256*157+142;
   P(113, 8) = 256*142+131;
   P(113, 9) = 256*131+64;
   P(114, 0) = 256*64+65;
   P(114, 1) = 256*65+66;
   P(114, 2) = 256*66+71;
   P(114, 3) = 256*71+68;
   P(114, 4) = 256*68+135;
   P(114, 5) = 256*135+130;
   P(114, 6) = 256*130+129;
   P(114, 7) = 256*129+128;
   P(114, 8) = 256*128+131;
   P(114, 9) = 256*131+64;
   P(115, 0) = 256*64+65;
   P(115, 1) = 256*65+114;
   P(115, 2) = 256*114+113;
   P(115, 3) = 256*113+112;
   P(115, 4) = 256*112+115;
   P(115, 5) = 256*115+126;
   P(115, 6) = 256*126+77;
   P(115, 7) = 256*77+78;
   P(115, 8) = 256*78+67;
   P(115, 9) = 256*67+64;
   P(116, 0) = 256*64+65;
   P(116, 1) = 256*65+114;
   P(116, 2) = 256*114+113;
   P(116, 3) = 256*113+112;
   P(116, 4) = 256*112+179;
   P(116, 5) = 256*179+190;
   P(116, 6) = 256*190+141;
   P(116, 7) = 256*141+142;
   P(116, 8) = 256*142+131;
   P(116, 9) = 256*131+64;
   P(117, 0) = 256*64+65;
   P(117, 1) = 256*65+114;
   P(117, 2) = 256*114+119;
   P(117, 3) = 256*119+116;
   P(117, 4) = 256*116+183;
   P(117, 5) = 256*183+178;
   P(117, 6) = 256*178+129;
   P(117, 7) = 256*129+128;
   P(117, 8) = 256*128+131;
   P(117, 9) = 256*131+64;
   P(118, 0) = 256*64+67;
   P(118, 1) = 256*67+78;
   P(118, 2) = 256*78+77;
   P(118, 3) = 256*77+76;
   P(118, 4) = 256*76+143;
   P(118, 5) = 256*143+140;
   P(118, 6) = 256*140+141;
   P(118, 7) = 256*141+142;
   P(118, 8) = 256*142+131;
   P(118, 9) = 256*131+64;
   P(119, 0) = 256*64+67;
   P(119, 1) = 256*67+78;
   P(119, 2) = 256*78+93;
   P(119, 3) = 256*93+92;
   P(119, 4) = 256*92+159;
   P(119, 5) = 256*159+156;
   P(119, 6) = 256*156+157;
   P(119, 7) = 256*157+142;
   P(119, 8) = 256*142+131;
   P(119, 9) = 256*131+64;
   P(120, 0) = 256*65+66;
   P(120, 1) = 256*66+71;
   P(120, 2) = 256*71+68;
   P(120, 3) = 256*68+69;
   P(120, 4) = 256*69+118;
   P(120, 5) = 256*118+117;
   P(120, 6) = 256*117+116;
   P(120, 7) = 256*116+119;
   P(120, 8) = 256*119+114;
   P(120, 9) = 256*114+65;
   P(121, 0) = 256*66+81;
   P(121, 1) = 256*81+80;
   P(121, 2) = 256*80+147;
   P(121, 3) = 256*147+144;
   P(121, 4) = 256*144+145;
   P(121, 5) = 256*145+130;
   P(121, 6) = 256*130+135;
   P(121, 7) = 256*135+68;
   P(121, 8) = 256*68+71;
   P(121, 9) = 256*71+66;
   P(122, 0) = 256*66+81;
   P(122, 1) = 256*81+82;
   P(122, 2) = 256*82+87;
   P(122, 3) = 256*87+84;
   P(122, 4) = 256*84+85;
   P(122, 5) = 256*85+70;
   P(122, 6) = 256*70+69;
   P(122, 7) = 256*69+68;
   P(122, 8) = 256*68+71;
   P(122, 9) = 256*71+66;
   P(123, 0) = 256*68+69;
   P(123, 1) = 256*69+70;
   P(123, 2) = 256*70+85;
   P(123, 3) = 256*85+84;
   P(123, 4) = 256*84+151;
   P(123, 5) = 256*151+146;
   P(123, 6) = 256*146+145;
   P(123, 7) = 256*145+130;
   P(123, 8) = 256*130+135;
   P(123, 9) = 256*135+68;
   P(124, 0) = 256*68+69;
   P(124, 1) = 256*69+70;
   P(124, 2) = 256*70+75;
   P(124, 3) = 256*75+72;
   P(124, 4) = 256*72+139;
   P(124, 5) = 256*139+134;
   P(124, 6) = 256*134+133;
   P(124, 7) = 256*133+132;
   P(124, 8) = 256*132+135;
   P(124, 9) = 256*135+68;
   P(125, 0) = 256*68+69;
   P(125, 1) = 256*69+118;
   P(125, 2) = 256*118+117;
   P(125, 3) = 256*117+116;
   P(125, 4) = 256*116+183;
   P(125, 5) = 256*183+178;
   P(125, 6) = 256*178+129;
   P(125, 7) = 256*129+130;
   P(125, 8) = 256*130+135;
   P(125, 9) = 256*135+68;
   P(126, 0) = 256*68+69;
   P(126, 1) = 256*69+118;
   P(126, 2) = 256*118+123;
   P(126, 3) = 256*123+120;
   P(126, 4) = 256*120+187;
   P(126, 5) = 256*187+182;
   P(126, 6) = 256*182+133;
   P(126, 7) = 256*133+132;
   P(126, 8) = 256*132+135;
   P(126, 9) = 256*135+68;
   P(127, 0) = 256*69+70;
   P(127, 1) = 256*70+75;
   P(127, 2) = 256*75+72;
   P(127, 3) = 256*72+73;
   P(127, 4) = 256*73+122;
   P(127, 5) = 256*122+121;
   P(127, 6) = 256*121+120;
   P(127, 7) = 256*120+123;
   P(127, 8) = 256*123+118;
   P(127, 9) = 256*118+69;
   P(128, 0) = 256*70+85;
   P(128, 1) = 256*85+84;
   P(128, 2) = 256*84+151;
   P(128, 3) = 256*151+148;
   P(128, 4) = 256*148+149;
   P(128, 5) = 256*149+134;
   P(128, 6) = 256*134+139;
   P(128, 7) = 256*139+72;
   P(128, 8) = 256*72+75;
   P(128, 9) = 256*75+70;
   P(129, 0) = 256*70+85;
   P(129, 1) = 256*85+86;
   P(129, 2) = 256*86+91;
   P(129, 3) = 256*91+88;
   P(129, 4) = 256*88+89;
   P(129, 5) = 256*89+74;
   P(129, 6) = 256*74+73;
   P(129, 7) = 256*73+72;
   P(129, 8) = 256*72+75;
   P(129, 9) = 256*75+70;
   P(130, 0) = 256*72+73;
   P(130, 1) = 256*73+74;
   P(130, 2) = 256*74+89;
   P(130, 3) = 256*89+88;
   P(130, 4) = 256*88+155;
   P(130, 5) = 256*155+150;
   P(130, 6) = 256*150+149;
   P(130, 7) = 256*149+134;
   P(130, 8) = 256*134+139;
   P(130, 9) = 256*139+72;
   P(131, 0) = 256*72+73;
   P(131, 1) = 256*73+74;
   P(131, 2) = 256*74+79;
   P(131, 3) = 256*79+76;
   P(131, 4) = 256*76+143;
   P(131, 5) = 256*143+138;
   P(131, 6) = 256*138+137;
   P(131, 7) = 256*137+136;
   P(131, 8) = 256*136+139;
   P(131, 9) = 256*139+72;
   P(132, 0) = 256*72+73;
   P(132, 1) = 256*73+122;
   P(132, 2) = 256*122+121;
   P(132, 3) = 256*121+120;
   P(132, 4) = 256*120+187;
   P(132, 5) = 256*187+182;
   P(132, 6) = 256*182+133;
   P(132, 7) = 256*133+134;
   P(132, 8) = 256*134+139;
   P(132, 9) = 256*139+72;
   P(133, 0) = 256*72+73;
   P(133, 1) = 256*73+122;
   P(133, 2) = 256*122+127;
   P(133, 3) = 256*127+124;
   P(133, 4) = 256*124+191;
   P(133, 5) = 256*191+186;
   P(133, 6) = 256*186+137;
   P(133, 7) = 256*137+136;
   P(133, 8) = 256*136+139;
   P(133, 9) = 256*139+72;
   P(134, 0) = 256*73+74;
   P(134, 1) = 256*74+79;
   P(134, 2) = 256*79+76;
   P(134, 3) = 256*76+77;
   P(134, 4) = 256*77+126;
   P(134, 5) = 256*126+125;
   P(134, 6) = 256*125+124;
   P(134, 7) = 256*124+127;
   P(134, 8) = 256*127+122;
   P(134, 9) = 256*122+73;
   P(135, 0) = 256*74+89;
   P(135, 1) = 256*89+88;
   P(135, 2) = 256*88+155;
   P(135, 3) = 256*155+152;
   P(135, 4) = 256*152+153;
   P(135, 5) = 256*153+138;
   P(135, 6) = 256*138+143;
   P(135, 7) = 256*143+76;
   P(135, 8) = 256*76+79;
   P(135, 9) = 256*79+74;
   P(136, 0) = 256*74+89;
   P(136, 1) = 256*89+90;
   P(136, 2) = 256*90+95;
   P(136, 3) = 256*95+92;
   P(136, 4) = 256*92+93;
   P(136, 5) = 256*93+78;
   P(136, 6) = 256*78+77;
   P(136, 7) = 256*77+76;
   P(136, 8) = 256*76+79;
   P(136, 9) = 256*79+74;
   P(137, 0) = 256*76+77;
   P(137, 1) = 256*77+78;
   P(137, 2) = 256*78+93;
   P(137, 3) = 256*93+92;
   P(137, 4) = 256*92+159;
   P(137, 5) = 256*159+154;
   P(137, 6) = 256*154+153;
   P(137, 7) = 256*153+138;
   P(137, 8) = 256*138+143;
   P(137, 9) = 256*143+76;
   P(138, 0) = 256*76+77;
   P(138, 1) = 256*77+126;
   P(138, 2) = 256*126+125;
   P(138, 3) = 256*125+124;
   P(138, 4) = 256*124+191;
   P(138, 5) = 256*191+186;
   P(138, 6) = 256*186+137;
   P(138, 7) = 256*137+138;
   P(138, 8) = 256*138+143;
   P(138, 9) = 256*143+76;
   P(139, 0) = 256*76+77;
   P(139, 1) = 256*77+126;
   P(139, 2) = 256*126+115;
   P(139, 3) = 256*115+112;
   P(139, 4) = 256*112+179;
   P(139, 5) = 256*179+190;
   P(139, 6) = 256*190+141;
   P(139, 7) = 256*141+140;
   P(139, 8) = 256*140+143;
   P(139, 9) = 256*143+76;
   P(140, 0) = 256*80+81;
   P(140, 1) = 256*81+82;
   P(140, 2) = 256*82+97;
   P(140, 3) = 256*97+96;
   P(140, 4) = 256*96+99;
   P(140, 5) = 256*99+110;
   P(140, 6) = 256*110+109;
   P(140, 7) = 256*109+94;
   P(140, 8) = 256*94+83;
   P(140, 9) = 256*83+80;
   P(141, 0) = 256*80+81;
   P(141, 1) = 256*81+82;
   P(141, 2) = 256*82+97;
   P(141, 3) = 256*97+96;
   P(141, 4) = 256*96+163;
   P(141, 5) = 256*163+174;
   P(141, 6) = 256*174+173;
   P(141, 7) = 256*173+158;
   P(141, 8) = 256*158+147;
   P(141, 9) = 256*147+80;
   P(142, 0) = 256*80+81;
   P(142, 1) = 256*81+82;
   P(142, 2) = 256*82+87;
   P(142, 3) = 256*87+84;
   P(142, 4) = 256*84+151;
   P(142, 5) = 256*151+146;
   P(142, 6) = 256*146+145;
   P(142, 7) = 256*145+144;
   P(142, 8) = 256*144+147;
   P(142, 9) = 256*147+80;
   P(143, 0) = 256*80+83;
   P(143, 1) = 256*83+94;
   P(143, 2) = 256*94+93;
   P(143, 3) = 256*93+92;
   P(143, 4) = 256*92+159;
   P(143, 5) = 256*159+156;
   P(143, 6) = 256*156+157;
   P(143, 7) = 256*157+158;
   P(143, 8) = 256*158+147;
   P(143, 9) = 256*147+80;
   P(144, 0) = 256*80+83;
   P(144, 1) = 256*83+94;
   P(144, 2) = 256*94+109;
   P(144, 3) = 256*109+108;
   P(144, 4) = 256*108+175;
   P(144, 5) = 256*175+172;
   P(144, 6) = 256*172+173;
   P(144, 7) = 256*173+158;
   P(144, 8) = 256*158+147;
   P(144, 9) = 256*147+80;
   P(145, 0) = 256*82+97;
   P(145, 1) = 256*97+96;
   P(145, 2) = 256*96+163;
   P(145, 3) = 256*163+160;
   P(145, 4) = 256*160+161;
   P(145, 5) = 256*161+146;
   P(145, 6) = 256*146+151;
   P(145, 7) = 256*151+84;
   P(145, 8) = 256*84+87;
   P(145, 9) = 256*87+82;
   P(146, 0) = 256*82+97;
   P(146, 1) = 256*97+98;
   P(146, 2) = 256*98+103;
   P(146, 3) = 256*103+100;
   P(146, 4) = 256*100+101;
   P(146, 5) = 256*101+86;
   P(146, 6) = 256*86+85;
   P(146, 7) = 256*85+84;
   P(146, 8) = 256*84+87;
   P(146, 9) = 256*87+82;
   P(147, 0) = 256*84+85;
   P(147, 1) = 256*85+86;
   P(147, 2) = 256*86+101;
   P(147, 3) = 256*101+100;
   P(147, 4) = 256*100+167;
   P(147, 5) = 256*167+162;
   P(147, 6) = 256*162+161;
   P(147, 7) = 256*161+146;
   P(147, 8) = 256*146+151;
   P(147, 9) = 256*151+84;
   P(148, 0) = 256*84+85;
   P(148, 1) = 256*85+86;
   P(148, 2) = 256*86+91;
   P(148, 3) = 256*91+88;
   P(148, 4) = 256*88+155;
   P(148, 5) = 256*155+150;
   P(148, 6) = 256*150+149;
   P(148, 7) = 256*149+148;
   P(148, 8) = 256*148+151;
   P(148, 9) = 256*151+84;
   P(149, 0) = 256*86+101;
   P(149, 1) = 256*101+100;
   P(149, 2) = 256*100+167;
   P(149, 3) = 256*167+164;
   P(149, 4) = 256*164+165;
   P(149, 5) = 256*165+150;
   P(149, 6) = 256*150+155;
   P(149, 7) = 256*155+88;
   P(149, 8) = 256*88+91;
   P(149, 9) = 256*91+86;
   P(150, 0) = 256*86+101;
   P(150, 1) = 256*101+102;
   P(150, 2) = 256*102+107;
   P(150, 3) = 256*107+104;
   P(150, 4) = 256*104+105;
   P(150, 5) = 256*105+90;
   P(150, 6) = 256*90+89;
   P(150, 7) = 256*89+88;
   P(150, 8) = 256*88+91;
   P(150, 9) = 256*91+86;
   P(151, 0) = 256*88+89;
   P(151, 1) = 256*89+90;
   P(151, 2) = 256*90+105;
   P(151, 3) = 256*105+104;
   P(151, 4) = 256*104+171;
   P(151, 5) = 256*171+166;
   P(151, 6) = 256*166+165;
   P(151, 7) = 256*165+150;
   P(151, 8) = 256*150+155;
   P(151, 9) = 256*155+88;
   P(152, 0) = 256*88+89;
   P(152, 1) = 256*89+90;
   P(152, 2) = 256*90+95;
   P(152, 3) = 256*95+92;
   P(152, 4) = 256*92+159;
   P(152, 5) = 256*159+154;
   P(152, 6) = 256*154+153;
   P(152, 7) = 256*153+152;
   P(152, 8) = 256*152+155;
   P(152, 9) = 256*155+88;
   P(153, 0) = 256*90+105;
   P(153, 1) = 256*105+104;
   P(153, 2) = 256*104+171;
   P(153, 3) = 256*171+168;
   P(153, 4) = 256*168+169;
   P(153, 5) = 256*169+154;
   P(153, 6) = 256*154+159;
   P(153, 7) = 256*159+92;
   P(153, 8) = 256*92+95;
   P(153, 9) = 256*95+90;
   P(154, 0) = 256*90+105;
   P(154, 1) = 256*105+106;
   P(154, 2) = 256*106+111;
   P(154, 3) = 256*111+108;
   P(154, 4) = 256*108+109;
   P(154, 5) = 256*109+94;
   P(154, 6) = 256*94+93;
   P(154, 7) = 256*93+92;
   P(154, 8) = 256*92+95;
   P(154, 9) = 256*95+90;
   P(155, 0) = 256*92+93;
   P(155, 1) = 256*93+94;
   P(155, 2) = 256*94+109;
   P(155, 3) = 256*109+108;
   P(155, 4) = 256*108+175;
   P(155, 5) = 256*175+170;
   P(155, 6) = 256*170+169;
   P(155, 7) = 256*169+154;
   P(155, 8) = 256*154+159;
   P(155, 9) = 256*159+92;
   P(156, 0) = 256*96+97;
   P(156, 1) = 256*97+98;
   P(156, 2) = 256*98+113;
   P(156, 3) = 256*113+112;
   P(156, 4) = 256*112+115;
   P(156, 5) = 256*115+126;
   P(156, 6) = 256*126+125;
   P(156, 7) = 256*125+110;
   P(156, 8) = 256*110+99;
   P(156, 9) = 256*99+96;
   P(157, 0) = 256*96+97;
   P(157, 1) = 256*97+98;
   P(157, 2) = 256*98+113;
   P(157, 3) = 256*113+112;
   P(157, 4) = 256*112+179;
   P(157, 5) = 256*179+190;
   P(157, 6) = 256*190+189;
   P(157, 7) = 256*189+174;
   P(157, 8) = 256*174+163;
   P(157, 9) = 256*163+96;
   P(158, 0) = 256*96+97;
   P(158, 1) = 256*97+98;
   P(158, 2) = 256*98+103;
   P(158, 3) = 256*103+100;
   P(158, 4) = 256*100+167;
   P(158, 5) = 256*167+162;
   P(158, 6) = 256*162+161;
   P(158, 7) = 256*161+160;
   P(158, 8) = 256*160+163;
   P(158, 9) = 256*163+96;
   P(159, 0) = 256*96+99;
   P(159, 1) = 256*99+110;
   P(159, 2) = 256*110+109;
   P(159, 3) = 256*109+108;
   P(159, 4) = 256*108+175;
   P(159, 5) = 256*175+172;
   P(159, 6) = 256*172+173;
   P(159, 7) = 256*173+174;
   P(159, 8) = 256*174+163;
   P(159, 9) = 256*163+96;
   P(160, 0) = 256*96+99;
   P(160, 1) = 256*99+110;
   P(160, 2) = 256*110+125;
   P(160, 3) = 256*125+124;
   P(160, 4) = 256*124+191;
   P(160, 5) = 256*191+188;
   P(160, 6) = 256*188+189;
   P(160, 7) = 256*189+174;
   P(160, 8) = 256*174+163;
   P(160, 9) = 256*163+96;
   P(161, 0) = 256*98+113;
   P(161, 1) = 256*113+112;
   P(161, 2) = 256*112+179;
   P(161, 3) = 256*179+176;
   P(161, 4) = 256*176+177;
   P(161, 5) = 256*177+162;
   P(161, 6) = 256*162+167;
   P(161, 7) = 256*167+100;
   P(161, 8) = 256*100+103;
   P(161, 9) = 256*103+98;
   P(162, 0) = 256*98+113;
   P(162, 1) = 256*113+114;
   P(162, 2) = 256*114+119;
   P(162, 3) = 256*119+116;
   P(162, 4) = 256*116+117;
   P(162, 5) = 256*117+102;
   P(162, 6) = 256*102+101;
   P(162, 7) = 256*101+100;
   P(162, 8) = 256*100+103;
   P(162, 9) = 256*103+98;
   P(163, 0) = 256*100+101;
   P(163, 1) = 256*101+102;
   P(163, 2) = 256*102+117;
   P(163, 3) = 256*117+116;
   P(163, 4) = 256*116+183;
   P(163, 5) = 256*183+178;
   P(163, 6) = 256*178+177;
   P(163, 7) = 256*177+162;
   P(163, 8) = 256*162+167;
   P(163, 9) = 256*167+100;
   P(164, 0) = 256*100+101;
   P(164, 1) = 256*101+102;
   P(164, 2) = 256*102+107;
   P(164, 3) = 256*107+104;
   P(164, 4) = 256*104+171;
   P(164, 5) = 256*171+166;
   P(164, 6) = 256*166+165;
   P(164, 7) = 256*165+164;
   P(164, 8) = 256*164+167;
   P(164, 9) = 256*167+100;
   P(165, 0) = 256*102+117;
   P(165, 1) = 256*117+116;
   P(165, 2) = 256*116+183;
   P(165, 3) = 256*183+180;
   P(165, 4) = 256*180+181;
   P(165, 5) = 256*181+166;
   P(165, 6) = 256*166+171;
   P(165, 7) = 256*171+104;
   P(165, 8) = 256*104+107;
   P(165, 9) = 256*107+102;
   P(166, 0) = 256*102+117;
   P(166, 1) = 256*117+118;
   P(166, 2) = 256*118+123;
   P(166, 3) = 256*123+120;
   P(166, 4) = 256*120+121;
   P(166, 5) = 256*121+106;
   P(166, 6) = 256*106+105;
   P(166, 7) = 256*105+104;
   P(166, 8) = 256*104+107;
   P(166, 9) = 256*107+102;
   P(167, 0) = 256*104+105;
   P(167, 1) = 256*105+106;
   P(167, 2) = 256*106+121;
   P(167, 3) = 256*121+120;
   P(167, 4) = 256*120+187;
   P(167, 5) = 256*187+182;
   P(167, 6) = 256*182+181;
   P(167, 7) = 256*181+166;
   P(167, 8) = 256*166+171;
   P(167, 9) = 256*171+104;
   P(168, 0) = 256*104+105;
   P(168, 1) = 256*105+106;
   P(168, 2) = 256*106+111;
   P(168, 3) = 256*111+108;
   P(168, 4) = 256*108+175;
   P(168, 5) = 256*175+170;
   P(168, 6) = 256*170+169;
   P(168, 7) = 256*169+168;
   P(168, 8) = 256*168+171;
   P(168, 9) = 256*171+104;
   P(169, 0) = 256*106+121;
   P(169, 1) = 256*121+120;
   P(169, 2) = 256*120+187;
   P(169, 3) = 256*187+184;
   P(169, 4) = 256*184+185;
   P(169, 5) = 256*185+170;
   P(169, 6) = 256*170+175;
   P(169, 7) = 256*175+108;
   P(169, 8) = 256*108+111;
   P(169, 9) = 256*111+106;
   P(170, 0) = 256*106+121;
   P(170, 1) = 256*121+122;
   P(170, 2) = 256*122+127;
   P(170, 3) = 256*127+124;
   P(170, 4) = 256*124+125;
   P(170, 5) = 256*125+110;
   P(170, 6) = 256*110+109;
   P(170, 7) = 256*109+108;
   P(170, 8) = 256*108+111;
   P(170, 9) = 256*111+106;
   P(171, 0) = 256*108+109;
   P(171, 1) = 256*109+110;
   P(171, 2) = 256*110+125;
   P(171, 3) = 256*125+124;
   P(171, 4) = 256*124+191;
   P(171, 5) = 256*191+186;
   P(171, 6) = 256*186+185;
   P(171, 7) = 256*185+170;
   P(171, 8) = 256*170+175;
   P(171, 9) = 256*175+108;
   P(172, 0) = 256*112+113;
   P(172, 1) = 256*113+114;
   P(172, 2) = 256*114+119;
   P(172, 3) = 256*119+116;
   P(172, 4) = 256*116+183;
   P(172, 5) = 256*183+178;
   P(172, 6) = 256*178+177;
   P(172, 7) = 256*177+176;
   P(172, 8) = 256*176+179;
   P(172, 9) = 256*179+112;
   P(173, 0) = 256*112+115;
   P(173, 1) = 256*115+126;
   P(173, 2) = 256*126+125;
   P(173, 3) = 256*125+124;
   P(173, 4) = 256*124+191;
   P(173, 5) = 256*191+188;
   P(173, 6) = 256*188+189;
   P(173, 7) = 256*189+190;
   P(173, 8) = 256*190+179;
   P(173, 9) = 256*179+112;
   P(174, 0) = 256*116+117;
   P(174, 1) = 256*117+118;
   P(174, 2) = 256*118+123;
   P(174, 3) = 256*123+120;
   P(174, 4) = 256*120+187;
   P(174, 5) = 256*187+182;
   P(174, 6) = 256*182+181;
   P(174, 7) = 256*181+180;
   P(174, 8) = 256*180+183;
   P(174, 9) = 256*183+116;
   P(175, 0) = 256*120+121;
   P(175, 1) = 256*121+122;
   P(175, 2) = 256*122+127;
   P(175, 3) = 256*127+124;
   P(175, 4) = 256*124+191;
   P(175, 5) = 256*191+186;
   P(175, 6) = 256*186+185;
   P(175, 7) = 256*185+184;
   P(175, 8) = 256*184+187;
   P(175, 9) = 256*187+120;
   P(176, 0) = 256*128+129;
   P(176, 1) = 256*129+130;
   P(176, 2) = 256*130+145;
   P(176, 3) = 256*145+144;
   P(176, 4) = 256*144+147;
   P(176, 5) = 256*147+158;
   P(176, 6) = 256*158+157;
   P(176, 7) = 256*157+142;
   P(176, 8) = 256*142+131;
   P(176, 9) = 256*131+128;
   P(177, 0) = 256*128+129;
   P(177, 1) = 256*129+130;
   P(177, 2) = 256*130+145;
   P(177, 3) = 256*145+144;
   P(177, 4) = 256*144+211;
   P(177, 5) = 256*211+222;
   P(177, 6) = 256*222+221;
   P(177, 7) = 256*221+206;
   P(177, 8) = 256*206+195;
   P(177, 9) = 256*195+128;
   P(178, 0) = 256*128+129;
   P(178, 1) = 256*129+130;
   P(178, 2) = 256*130+135;
   P(178, 3) = 256*135+132;
   P(178, 4) = 256*132+199;
   P(178, 5) = 256*199+194;
   P(178, 6) = 256*194+193;
   P(178, 7) = 256*193+192;
   P(178, 8) = 256*192+195;
   P(178, 9) = 256*195+128;
   P(179, 0) = 256*128+129;
   P(179, 1) = 256*129+178;
   P(179, 2) = 256*178+177;
   P(179, 3) = 256*177+176;
   P(179, 4) = 256*176+179;
   P(179, 5) = 256*179+190;
   P(179, 6) = 256*190+141;
   P(179, 7) = 256*141+142;
   P(179, 8) = 256*142+131;
   P(179, 9) = 256*131+128;
   P(180, 0) = 256*128+129;
   P(180, 1) = 256*129+178;
   P(180, 2) = 256*178+177;
   P(180, 3) = 256*177+176;
   P(180, 4) = 256*176+243;
   P(180, 5) = 256*243+254;
   P(180, 6) = 256*254+205;
   P(180, 7) = 256*205+206;
   P(180, 8) = 256*206+195;
   P(180, 9) = 256*195+128;
   P(181, 0) = 256*128+129;
   P(181, 1) = 256*129+178;
   P(181, 2) = 256*178+183;
   P(181, 3) = 256*183+180;
   P(181, 4) = 256*180+247;
   P(181, 5) = 256*247+242;
   P(181, 6) = 256*242+193;
   P(181, 7) = 256*193+192;
   P(181, 8) = 256*192+195;
   P(181, 9) = 256*195+128;
   P(182, 0) = 256*128+131;
   P(182, 1) = 256*131+142;
   P(182, 2) = 256*142+141;
   P(182, 3) = 256*141+140;
   P(182, 4) = 256*140+207;
   P(182, 5) = 256*207+204;
   P(182, 6) = 256*204+205;
   P(182, 7) = 256*205+206;
   P(182, 8) = 256*206+195;
   P(182, 9) = 256*195+128;
   P(183, 0) = 256*128+131;
   P(183, 1) = 256*131+142;
   P(183, 2) = 256*142+157;
   P(183, 3) = 256*157+156;
   P(183, 4) = 256*156+223;
   P(183, 5) = 256*223+220;
   P(183, 6) = 256*220+221;
   P(183, 7) = 256*221+206;
   P(183, 8) = 256*206+195;
   P(183, 9) = 256*195+128;
   P(184, 0) = 256*129+130;
   P(184, 1) = 256*130+135;
   P(184, 2) = 256*135+132;
   P(184, 3) = 256*132+133;
   P(184, 4) = 256*133+182;
   P(184, 5) = 256*182+181;
   P(184, 6) = 256*181+180;
   P(184, 7) = 256*180+183;
   P(184, 8) = 256*183+178;
   P(184, 9) = 256*178+129;
   P(185, 0) = 256*130+145;
   P(185, 1) = 256*145+144;
   P(185, 2) = 256*144+211;
   P(185, 3) = 256*211+208;
   P(185, 4) = 256*208+209;
   P(185, 5) = 256*209+194;
   P(185, 6) = 256*194+199;
   P(185, 7) = 256*199+132;
   P(185, 8) = 256*132+135;
   P(185, 9) = 256*135+130;
   P(186, 0) = 256*130+145;
   P(186, 1) = 256*145+146;
   P(186, 2) = 256*146+151;
   P(186, 3) = 256*151+148;
   P(186, 4) = 256*148+149;
   P(186, 5) = 256*149+134;
   P(186, 6) = 256*134+133;
   P(186, 7) = 256*133+132;
   P(186, 8) = 256*132+135;
   P(186, 9) = 256*135+130;
   P(187, 0) = 256*132+133;
   P(187, 1) = 256*133+134;
   P(187, 2) = 256*134+149;
   P(187, 3) = 256*149+148;
   P(187, 4) = 256*148+215;
   P(187, 5) = 256*215+210;
   P(187, 6) = 256*210+209;
   P(187, 7) = 256*209+194;
   P(187, 8) = 256*194+199;
   P(187, 9) = 256*199+132;
   P(188, 0) = 256*132+133;
   P(188, 1) = 256*133+134;
   P(188, 2) = 256*134+139;
   P(188, 3) = 256*139+136;
   P(188, 4) = 256*136+203;
   P(188, 5) = 256*203+198;
   P(188, 6) = 256*198+197;
   P(188, 7) = 256*197+196;
   P(188, 8) = 256*196+199;
   P(188, 9) = 256*199+132;
   P(189, 0) = 256*132+133;
   P(189, 1) = 256*133+182;
   P(189, 2) = 256*182+181;
   P(189, 3) = 256*181+180;
   P(189, 4) = 256*180+247;
   P(189, 5) = 256*247+242;
   P(189, 6) = 256*242+193;
   P(189, 7) = 256*193+194;
   P(189, 8) = 256*194+199;
   P(189, 9) = 256*199+132;
   P(190, 0) = 256*132+133;
   P(190, 1) = 256*133+182;
   P(190, 2) = 256*182+187;
   P(190, 3) = 256*187+184;
   P(190, 4) = 256*184+251;
   P(190, 5) = 256*251+246;
   P(190, 6) = 256*246+197;
   P(190, 7) = 256*197+196;
   P(190, 8) = 256*196+199;
   P(190, 9) = 256*199+132;
   P(191, 0) = 256*133+134;
   P(191, 1) = 256*134+139;
   P(191, 2) = 256*139+136;
   P(191, 3) = 256*136+137;
   P(191, 4) = 256*137+186;
   P(191, 5) = 256*186+185;
   P(191, 6) = 256*185+184;
   P(191, 7) = 256*184+187;
   P(191, 8) = 256*187+182;
   P(191, 9) = 256*182+133;
   P(192, 0) = 256*134+149;
   P(192, 1) = 256*149+148;
   P(192, 2) = 256*148+215;
   P(192, 3) = 256*215+212;
   P(192, 4) = 256*212+213;
   P(192, 5) = 256*213+198;
   P(192, 6) = 256*198+203;
   P(192, 7) = 256*203+136;
   P(192, 8) = 256*136+139;
   P(192, 9) = 256*139+134;
   P(193, 0) = 256*134+149;
   P(193, 1) = 256*149+150;
   P(193, 2) = 256*150+155;
   P(193, 3) = 256*155+152;
   P(193, 4) = 256*152+153;
   P(193, 5) = 256*153+138;
   P(193, 6) = 256*138+137;
   P(193, 7) = 256*137+136;
   P(193, 8) = 256*136+139;
   P(193, 9) = 256*139+134;
   P(194, 0) = 256*136+137;
   P(194, 1) = 256*137+138;
   P(194, 2) = 256*138+153;
   P(194, 3) = 256*153+152;
   P(194, 4) = 256*152+219;
   P(194, 5) = 256*219+214;
   P(194, 6) = 256*214+213;
   P(194, 7) = 256*213+198;
   P(194, 8) = 256*198+203;
   P(194, 9) = 256*203+136;
   P(195, 0) = 256*136+137;
   P(195, 1) = 256*137+138;
   P(195, 2) = 256*138+143;
   P(195, 3) = 256*143+140;
   P(195, 4) = 256*140+207;
   P(195, 5) = 256*207+202;
   P(195, 6) = 256*202+201;
   P(195, 7) = 256*201+200;
   P(195, 8) = 256*200+203;
   P(195, 9) = 256*203+136;
   P(196, 0) = 256*136+137;
   P(196, 1) = 256*137+186;
   P(196, 2) = 256*186+185;
   P(196, 3) = 256*185+184;
   P(196, 4) = 256*184+251;
   P(196, 5) = 256*251+246;
   P(196, 6) = 256*246+197;
   P(196, 7) = 256*197+198;
   P(196, 8) = 256*198+203;
   P(196, 9) = 256*203+136;
   P(197, 0) = 256*136+137;
   P(197, 1) = 256*137+186;
   P(197, 2) = 256*186+191;
   P(197, 3) = 256*191+188;
   P(197, 4) = 256*188+255;
   P(197, 5) = 256*255+250;
   P(197, 6) = 256*250+201;
   P(197, 7) = 256*201+200;
   P(197, 8) = 256*200+203;
   P(197, 9) = 256*203+136;
   P(198, 0) = 256*137+138;
   P(198, 1) = 256*138+143;
   P(198, 2) = 256*143+140;
   P(198, 3) = 256*140+141;
   P(198, 4) = 256*141+190;
   P(198, 5) = 256*190+189;
   P(198, 6) = 256*189+188;
   P(198, 7) = 256*188+191;
   P(198, 8) = 256*191+186;
   P(198, 9) = 256*186+137;
   P(199, 0) = 256*138+153;
   P(199, 1) = 256*153+152;
   P(199, 2) = 256*152+219;
   P(199, 3) = 256*219+216;
   P(199, 4) = 256*216+217;
   P(199, 5) = 256*217+202;
   P(199, 6) = 256*202+207;
   P(199, 7) = 256*207+140;
   P(199, 8) = 256*140+143;
   P(199, 9) = 256*143+138;
   P(200, 0) = 256*138+153;
   P(200, 1) = 256*153+154;
   P(200, 2) = 256*154+159;
   P(200, 3) = 256*159+156;
   P(200, 4) = 256*156+157;
   P(200, 5) = 256*157+142;
   P(200, 6) = 256*142+141;
   P(200, 7) = 256*141+140;
   P(200, 8) = 256*140+143;
   P(200, 9) = 256*143+138;
   P(201, 0) = 256*140+141;
   P(201, 1) = 256*141+142;
   P(201, 2) = 256*142+157;
   P(201, 3) = 256*157+156;
   P(201, 4) = 256*156+223;
   P(201, 5) = 256*223+218;
   P(201, 6) = 256*218+217;
   P(201, 7) = 256*217+202;
   P(201, 8) = 256*202+207;
   P(201, 9) = 256*207+140;
   P(202, 0) = 256*140+141;
   P(202, 1) = 256*141+190;
   P(202, 2) = 256*190+189;
   P(202, 3) = 256*189+188;
   P(202, 4) = 256*188+255;
   P(202, 5) = 256*255+250;
   P(202, 6) = 256*250+201;
   P(202, 7) = 256*201+202;
   P(202, 8) = 256*202+207;
   P(202, 9) = 256*207+140;
   P(203, 0) = 256*140+141;
   P(203, 1) = 256*141+190;
   P(203, 2) = 256*190+179;
   P(203, 3) = 256*179+176;
   P(203, 4) = 256*176+243;
   P(203, 5) = 256*243+254;
   P(203, 6) = 256*254+205;
   P(203, 7) = 256*205+204;
   P(203, 8) = 256*204+207;
   P(203, 9) = 256*207+140;
   P(204, 0) = 256*144+145;
   P(204, 1) = 256*145+146;
   P(204, 2) = 256*146+161;
   P(204, 3) = 256*161+160;
   P(204, 4) = 256*160+163;
   P(204, 5) = 256*163+174;
   P(204, 6) = 256*174+173;
   P(204, 7) = 256*173+158;
   P(204, 8) = 256*158+147;
   P(204, 9) = 256*147+144;
   P(205, 0) = 256*144+145;
   P(205, 1) = 256*145+146;
   P(205, 2) = 256*146+161;
   P(205, 3) = 256*161+160;
   P(205, 4) = 256*160+227;
   P(205, 5) = 256*227+238;
   P(205, 6) = 256*238+237;
   P(205, 7) = 256*237+222;
   P(205, 8) = 256*222+211;
   P(205, 9) = 256*211+144;
   P(206, 0) = 256*144+145;
   P(206, 1) = 256*145+146;
   P(206, 2) = 256*146+151;
   P(206, 3) = 256*151+148;
   P(206, 4) = 256*148+215;
   P(206, 5) = 256*215+210;
   P(206, 6) = 256*210+209;
   P(206, 7) = 256*209+208;
   P(206, 8) = 256*208+211;
   P(206, 9) = 256*211+144;
   P(207, 0) = 256*144+147;
   P(207, 1) = 256*147+158;
   P(207, 2) = 256*158+157;
   P(207, 3) = 256*157+156;
   P(207, 4) = 256*156+223;
   P(207, 5) = 256*223+220;
   P(207, 6) = 256*220+221;
   P(207, 7) = 256*221+222;
   P(207, 8) = 256*222+211;
   P(207, 9) = 256*211+144;
   P(208, 0) = 256*144+147;
   P(208, 1) = 256*147+158;
   P(208, 2) = 256*158+173;
   P(208, 3) = 256*173+172;
   P(208, 4) = 256*172+239;
   P(208, 5) = 256*239+236;
   P(208, 6) = 256*236+237;
   P(208, 7) = 256*237+222;
   P(208, 8) = 256*222+211;
   P(208, 9) = 256*211+144;
   P(209, 0) = 256*146+161;
   P(209, 1) = 256*161+160;
   P(209, 2) = 256*160+227;
   P(209, 3) = 256*227+224;
   P(209, 4) = 256*224+225;
   P(209, 5) = 256*225+210;
   P(209, 6) = 256*210+215;
   P(209, 7) = 256*215+148;
   P(209, 8) = 256*148+151;
   P(209, 9) = 256*151+146;
   P(210, 0) = 256*146+161;
   P(210, 1) = 256*161+162;
   P(210, 2) = 256*162+167;
   P(210, 3) = 256*167+164;
   P(210, 4) = 256*164+165;
   P(210, 5) = 256*165+150;
   P(210, 6) = 256*150+149;
   P(210, 7) = 256*149+148;
   P(210, 8) = 256*148+151;
   P(210, 9) = 256*151+146;
   P(211, 0) = 256*148+149;
   P(211, 1) = 256*149+150;
   P(211, 2) = 256*150+165;
   P(211, 3) = 256*165+164;
   P(211, 4) = 256*164+231;
   P(211, 5) = 256*231+226;
   P(211, 6) = 256*226+225;
   P(211, 7) = 256*225+210;
   P(211, 8) = 256*210+215;
   P(211, 9) = 256*215+148;
   P(212, 0) = 256*148+149;
   P(212, 1) = 256*149+150;
   P(212, 2) = 256*150+155;
   P(212, 3) = 256*155+152;
   P(212, 4) = 256*152+219;
   P(212, 5) = 256*219+214;
   P(212, 6) = 256*214+213;
   P(212, 7) = 256*213+212;
   P(212, 8) = 256*212+215;
   P(212, 9) = 256*215+148;
   P(213, 0) = 256*150+165;
   P(213, 1) = 256*165+164;
   P(213, 2) = 256*164+231;
   P(213, 3) = 256*231+228;
   P(213, 4) = 256*228+229;
   P(213, 5) = 256*229+214;
   P(213, 6) = 256*214+219;
   P(213, 7) = 256*219+152;
   P(213, 8) = 256*152+155;
   P(213, 9) = 256*155+150;
   P(214, 0) = 256*150+165;
   P(214, 1) = 256*165+166;
   P(214, 2) = 256*166+171;
   P(214, 3) = 256*171+168;
   P(214, 4) = 256*168+169;
   P(214, 5) = 256*169+154;
   P(214, 6) = 256*154+153;
   P(214, 7) = 256*153+152;
   P(214, 8) = 256*152+155;
   P(214, 9) = 256*155+150;
   P(215, 0) = 256*152+153;
   P(215, 1) = 256*153+154;
   P(215, 2) = 256*154+169;
   P(215, 3) = 256*169+168;
   P(215, 4) = 256*168+235;
   P(215, 5) = 256*235+230;
   P(215, 6) = 256*230+229;
   P(215, 7) = 256*229+214;
   P(215, 8) = 256*214+219;
   P(215, 9) = 256*219+152;
   P(216, 0) = 256*152+153;
   P(216, 1) = 256*153+154;
   P(216, 2) = 256*154+159;
   P(216, 3) = 256*159+156;
   P(216, 4) = 256*156+223;
   P(216, 5) = 256*223+218;
   P(216, 6) = 256*218+217;
   P(216, 7) = 256*217+216;
   P(216, 8) = 256*216+219;
   P(216, 9) = 256*219+152;
   P(217, 0) = 256*154+169;
   P(217, 1) = 256*169+168;
   P(217, 2) = 256*168+235;
   P(217, 3) = 256*235+232;
   P(217, 4) = 256*232+233;
   P(217, 5) = 256*233+218;
   P(217, 6) = 256*218+223;
   P(217, 7) = 256*223+156;
   P(217, 8) = 256*156+159;
   P(217, 9) = 256*159+154;
   P(218, 0) = 256*154+169;
   P(218, 1) = 256*169+170;
   P(218, 2) = 256*170+175;
   P(218, 3) = 256*175+172;
   P(218, 4) = 256*172+173;
   P(218, 5) = 256*173+158;
   P(218, 6) = 256*158+157;
   P(218, 7) = 256*157+156;
   P(218, 8) = 256*156+159;
   P(218, 9) = 256*159+154;
   P(219, 0) = 256*156+157;
   P(219, 1) = 256*157+158;
   P(219, 2) = 256*158+173;
   P(219, 3) = 256*173+172;
   P(219, 4) = 256*172+239;
   P(219, 5) = 256*239+234;
   P(219, 6) = 256*234+233;
   P(219, 7) = 256*233+218;
   P(219, 8) = 256*218+223;
   P(219, 9) = 256*223+156;
   P(220, 0) = 256*160+161;
   P(220, 1) = 256*161+162;
   P(220, 2) = 256*162+177;
   P(220, 3) = 256*177+176;
   P(220, 4) = 256*176+179;
   P(220, 5) = 256*179+190;
   P(220, 6) = 256*190+189;
   P(220, 7) = 256*189+174;
   P(220, 8) = 256*174+163;
   P(220, 9) = 256*163+160;
   P(221, 0) = 256*160+161;
   P(221, 1) = 256*161+162;
   P(221, 2) = 256*162+177;
   P(221, 3) = 256*177+176;
   P(221, 4) = 256*176+243;
   P(221, 5) = 256*243+254;
   P(221, 6) = 256*254+253;
   P(221, 7) = 256*253+238;
   P(221, 8) = 256*238+227;
   P(221, 9) = 256*227+160;
   P(222, 0) = 256*160+161;
   P(222, 1) = 256*161+162;
   P(222, 2) = 256*162+167;
   P(222, 3) = 256*167+164;
   P(222, 4) = 256*164+231;
   P(222, 5) = 256*231+226;
   P(222, 6) = 256*226+225;
   P(222, 7) = 256*225+224;
   P(222, 8) = 256*224+227;
   P(222, 9) = 256*227+160;
   P(223, 0) = 256*160+163;
   P(223, 1) = 256*163+174;
   P(223, 2) = 256*174+173;
   P(223, 3) = 256*173+172;
   P(223, 4) = 256*172+239;
   P(223, 5) = 256*239+236;
   P(223, 6) = 256*236+237;
   P(223, 7) = 256*237+238;
   P(223, 8) = 256*238+227;
   P(223, 9) = 256*227+160;
   P(224, 0) = 256*160+163;
   P(224, 1) = 256*163+174;
   P(224, 2) = 256*174+189;
   P(224, 3) = 256*189+188;
   P(224, 4) = 256*188+255;
   P(224, 5) = 256*255+252;
   P(224, 6) = 256*252+253;
   P(224, 7) = 256*253+238;
   P(224, 8) = 256*238+227;
   P(224, 9) = 256*227+160;
   P(225, 0) = 256*162+177;
   P(225, 1) = 256*177+176;
   P(225, 2) = 256*176+243;
   P(225, 3) = 256*243+240;
   P(225, 4) = 256*240+241;
   P(225, 5) = 256*241+226;
   P(225, 6) = 256*226+231;
   P(225, 7) = 256*231+164;
   P(225, 8) = 256*164+167;
   P(225, 9) = 256*167+162;
   P(226, 0) = 256*162+177;
   P(226, 1) = 256*177+178;
   P(226, 2) = 256*178+183;
   P(226, 3) = 256*183+180;
   P(226, 4) = 256*180+181;
   P(226, 5) = 256*181+166;
   P(226, 6) = 256*166+165;
   P(226, 7) = 256*165+164;
   P(226, 8) = 256*164+167;
   P(226, 9) = 256*167+162;
   P(227, 0) = 256*164+165;
   P(227, 1) = 256*165+166;
   P(227, 2) = 256*166+181;
   P(227, 3) = 256*181+180;
   P(227, 4) = 256*180+247;
   P(227, 5) = 256*247+242;
   P(227, 6) = 256*242+241;
   P(227, 7) = 256*241+226;
   P(227, 8) = 256*226+231;
   P(227, 9) = 256*231+164;
   P(228, 0) = 256*164+165;
   P(228, 1) = 256*165+166;
   P(228, 2) = 256*166+171;
   P(228, 3) = 256*171+168;
   P(228, 4) = 256*168+235;
   P(228, 5) = 256*235+230;
   P(228, 6) = 256*230+229;
   P(228, 7) = 256*229+228;
   P(228, 8) = 256*228+231;
   P(228, 9) = 256*231+164;
   P(229, 0) = 256*166+181;
   P(229, 1) = 256*181+180;
   P(229, 2) = 256*180+247;
   P(229, 3) = 256*247+244;
   P(229, 4) = 256*244+245;
   P(229, 5) = 256*245+230;
   P(229, 6) = 256*230+235;
   P(229, 7) = 256*235+168;
   P(229, 8) = 256*168+171;
   P(229, 9) = 256*171+166;
   P(230, 0) = 256*166+181;
   P(230, 1) = 256*181+182;
   P(230, 2) = 256*182+187;
   P(230, 3) = 256*187+184;
   P(230, 4) = 256*184+185;
   P(230, 5) = 256*185+170;
   P(230, 6) = 256*170+169;
   P(230, 7) = 256*169+168;
   P(230, 8) = 256*168+171;
   P(230, 9) = 256*171+166;
   P(231, 0) = 256*168+169;
   P(231, 1) = 256*169+170;
   P(231, 2) = 256*170+185;
   P(231, 3) = 256*185+184;
   P(231, 4) = 256*184+251;
   P(231, 5) = 256*251+246;
   P(231, 6) = 256*246+245;
   P(231, 7) = 256*245+230;
   P(231, 8) = 256*230+235;
   P(231, 9) = 256*235+168;
   P(232, 0) = 256*168+169;
   P(232, 1) = 256*169+170;
   P(232, 2) = 256*170+175;
   P(232, 3) = 256*175+172;
   P(232, 4) = 256*172+239;
   P(232, 5) = 256*239+234;
   P(232, 6) = 256*234+233;
   P(232, 7) = 256*233+232;
   P(232, 8) = 256*232+235;
   P(232, 9) = 256*235+168;
   P(233, 0) = 256*170+185;
   P(233, 1) = 256*185+184;
   P(233, 2) = 256*184+251;
   P(233, 3) = 256*251+248;
   P(233, 4) = 256*248+249;
   P(233, 5) = 256*249+234;
   P(233, 6) = 256*234+239;
   P(233, 7) = 256*239+172;
   P(233, 8) = 256*172+175;
   P(233, 9) = 256*175+170;
   P(234, 0) = 256*170+185;
   P(234, 1) = 256*185+186;
   P(234, 2) = 256*186+191;
   P(234, 3) = 256*191+188;
   P(234, 4) = 256*188+189;
   P(234, 5) = 256*189+174;
   P(234, 6) = 256*174+173;
   P(234, 7) = 256*173+172;
   P(234, 8) = 256*172+175;
   P(234, 9) = 256*175+170;
   P(235, 0) = 256*172+173;
   P(235, 1) = 256*173+174;
   P(235, 2) = 256*174+189;
   P(235, 3) = 256*189+188;
   P(235, 4) = 256*188+255;
   P(235, 5) = 256*255+250;
   P(235, 6) = 256*250+249;
   P(235, 7) = 256*249+234;
   P(235, 8) = 256*234+239;
   P(235, 9) = 256*239+172;
   P(236, 0) = 256*176+177;
   P(236, 1) = 256*177+178;
   P(236, 2) = 256*178+183;
   P(236, 3) = 256*183+180;
   P(236, 4) = 256*180+247;
   P(236, 5) = 256*247+242;
   P(236, 6) = 256*242+241;
   P(236, 7) = 256*241+240;
   P(236, 8) = 256*240+243;
   P(236, 9) = 256*243+176;
   P(237, 0) = 256*176+179;
   P(237, 1) = 256*179+190;
   P(237, 2) = 256*190+189;
   P(237, 3) = 256*189+188;
   P(237, 4) = 256*188+255;
   P(237, 5) = 256*255+252;
   P(237, 6) = 256*252+253;
   P(237, 7) = 256*253+254;
   P(237, 8) = 256*254+243;
   P(237, 9) = 256*243+176;
   P(238, 0) = 256*180+181;
   P(238, 1) = 256*181+182;
   P(238, 2) = 256*182+187;
   P(238, 3) = 256*187+184;
   P(238, 4) = 256*184+251;
   P(238, 5) = 256*251+246;
   P(238, 6) = 256*246+245;
   P(238, 7) = 256*245+244;
   P(238, 8) = 256*244+247;
   P(238, 9) = 256*247+180;
   P(239, 0) = 256*184+185;
   P(239, 1) = 256*185+186;
   P(239, 2) = 256*186+191;
   P(239, 3) = 256*191+188;
   P(239, 4) = 256*188+255;
   P(239, 5) = 256*255+250;
   P(239, 6) = 256*250+249;
   P(239, 7) = 256*249+248;
   P(239, 8) = 256*248+251;
   P(239, 9) = 256*251+184;
   P(240, 0) = 256*192+193;
   P(240, 1) = 256*193+194;
   P(240, 2) = 256*194+209;
   P(240, 3) = 256*209+208;
   P(240, 4) = 256*208+211;
   P(240, 5) = 256*211+222;
   P(240, 6) = 256*222+221;
   P(240, 7) = 256*221+206;
   P(240, 8) = 256*206+195;
   P(240, 9) = 256*195+192;
   P(241, 0) = 256*192+193;
   P(241, 1) = 256*193+242;
   P(241, 2) = 256*242+241;
   P(241, 3) = 256*241+240;
   P(241, 4) = 256*240+243;
   P(241, 5) = 256*243+254;
   P(241, 6) = 256*254+205;
   P(241, 7) = 256*205+206;
   P(241, 8) = 256*206+195;
   P(241, 9) = 256*195+192;
   P(242, 0) = 256*193+194;
   P(242, 1) = 256*194+199;
   P(242, 2) = 256*199+196;
   P(242, 3) = 256*196+197;
   P(242, 4) = 256*197+246;
   P(242, 5) = 256*246+245;
   P(242, 6) = 256*245+244;
   P(242, 7) = 256*244+247;
   P(242, 8) = 256*247+242;
   P(242, 9) = 256*242+193;
   P(243, 0) = 256*194+209;
   P(243, 1) = 256*209+210;
   P(243, 2) = 256*210+215;
   P(243, 3) = 256*215+212;
   P(243, 4) = 256*212+213;
   P(243, 5) = 256*213+198;
   P(243, 6) = 256*198+197;
   P(243, 7) = 256*197+196;
   P(243, 8) = 256*196+199;
   P(243, 9) = 256*199+194;
   P(244, 0) = 256*197+198;
   P(244, 1) = 256*198+203;
   P(244, 2) = 256*203+200;
   P(244, 3) = 256*200+201;
   P(244, 4) = 256*201+250;
   P(244, 5) = 256*250+249;
   P(244, 6) = 256*249+248;
   P(244, 7) = 256*248+251;
   P(244, 8) = 256*251+246;
   P(244, 9) = 256*246+197;
   P(245, 0) = 256*198+213;
   P(245, 1) = 256*213+214;
   P(245, 2) = 256*214+219;
   P(245, 3) = 256*219+216;
   P(245, 4) = 256*216+217;
   P(245, 5) = 256*217+202;
   P(245, 6) = 256*202+201;
   P(245, 7) = 256*201+200;
   P(245, 8) = 256*200+203;
   P(245, 9) = 256*203+198;
   P(246, 0) = 256*201+202;
   P(246, 1) = 256*202+207;
   P(246, 2) = 256*207+204;
   P(246, 3) = 256*204+205;
   P(246, 4) = 256*205+254;
   P(246, 5) = 256*254+253;
   P(246, 6) = 256*253+252;
   P(246, 7) = 256*252+255;
   P(246, 8) = 256*255+250;
   P(246, 9) = 256*250+201;
   P(247, 0) = 256*202+217;
   P(247, 1) = 256*217+218;
   P(247, 2) = 256*218+223;
   P(247, 3) = 256*223+220;
   P(247, 4) = 256*220+221;
   P(247, 5) = 256*221+206;
   P(247, 6) = 256*206+205;
   P(247, 7) = 256*205+204;
   P(247, 8) = 256*204+207;
   P(247, 9) = 256*207+202;
   P(248, 0) = 256*208+209;
   P(248, 1) = 256*209+210;
   P(248, 2) = 256*210+225;
   P(248, 3) = 256*225+224;
   P(248, 4) = 256*224+227;
   P(248, 5) = 256*227+238;
   P(248, 6) = 256*238+237;
   P(248, 7) = 256*237+222;
   P(248, 8) = 256*222+211;
   P(248, 9) = 256*211+208;
   P(249, 0) = 256*210+225;
   P(249, 1) = 256*225+226;
   P(249, 2) = 256*226+231;
   P(249, 3) = 256*231+228;
   P(249, 4) = 256*228+229;
   P(249, 5) = 256*229+214;
   P(249, 6) = 256*214+213;
   P(249, 7) = 256*213+212;
   P(249, 8) = 256*212+215;
   P(249, 9) = 256*215+210;
   P(250, 0) = 256*214+229;
   P(250, 1) = 256*229+230;
   P(250, 2) = 256*230+235;
   P(250, 3) = 256*235+232;
   P(250, 4) = 256*232+233;
   P(250, 5) = 256*233+218;
   P(250, 6) = 256*218+217;
   P(250, 7) = 256*217+216;
   P(250, 8) = 256*216+219;
   P(250, 9) = 256*219+214;
   P(251, 0) = 256*218+233;
   P(251, 1) = 256*233+234;
   P(251, 2) = 256*234+239;
   P(251, 3) = 256*239+236;
   P(251, 4) = 256*236+237;
   P(251, 5) = 256*237+222;
   P(251, 6) = 256*222+221;
   P(251, 7) = 256*221+220;
   P(251, 8) = 256*220+223;
   P(251, 9) = 256*223+218;
   P(252, 0) = 256*224+225;
   P(252, 1) = 256*225+226;
   P(252, 2) = 256*226+241;
   P(252, 3) = 256*241+240;
   P(252, 4) = 256*240+243;
   P(252, 5) = 256*243+254;
   P(252, 6) = 256*254+253;
   P(252, 7) = 256*253+238;
   P(252, 8) = 256*238+227;
   P(252, 9) = 256*227+224;
   P(253, 0) = 256*226+241;
   P(253, 1) = 256*241+242;
   P(253, 2) = 256*242+247;
   P(253, 3) = 256*247+244;
   P(253, 4) = 256*244+245;
   P(253, 5) = 256*245+230;
   P(253, 6) = 256*230+229;
   P(253, 7) = 256*229+228;
   P(253, 8) = 256*228+231;
   P(253, 9) = 256*231+226;
   P(254, 0) = 256*230+245;
   P(254, 1) = 256*245+246;
   P(254, 2) = 256*246+251;
   P(254, 3) = 256*251+248;
   P(254, 4) = 256*248+249;
   P(254, 5) = 256*249+234;
   P(254, 6) = 256*234+233;
   P(254, 7) = 256*233+232;
   P(254, 8) = 256*232+235;
   P(254, 9) = 256*235+230;
   P(255, 0) = 256*234+249;
   P(255, 1) = 256*249+250;
   P(255, 2) = 256*250+255;
   P(255, 3) = 256*255+252;
   P(255, 4) = 256*252+253;
   P(255, 5) = 256*253+238;
   P(255, 6) = 256*238+237;
   P(255, 7) = 256*237+236;
   P(255, 8) = 256*236+239;
   P(255, 9) = 256*239+234;
	 return P;
  }
  
